7 patches for repository http://code.haskell.org/XMonadContrib:

Wed Nov  3 15:55:05 EDT 2010  Nathaniel Wesley Filardo <nwf@cs.jhu.edu>
  * Use messageHook in Util.EZConfig

Wed Nov  3 15:55:18 EDT 2010  Nathaniel Wesley Filardo <nwf@cs.jhu.edu>
  * Use messageHook in Util.NamedActions

Tue Sep 27 18:20:53 EDT 2011  Nathaniel Wesley Filardo <nwf@cs.jhu.edu>
  * Add ppOverride to Hooks.DynamicLog

Fri Nov 18 14:20:49 EST 2011  Nathaniel Wesley Filardo <nwf@cs.jhu.edu>
  * Add spawnPipePid

Fri Nov 18 14:24:44 EST 2011  Nathaniel Wesley Filardo <nwf@cs.jhu.edu>
  * Support for filters in XMonad.Prompt.Window

Fri Nov 18 14:29:12 EST 2011  Nathaniel Wesley Filardo <nwf@cs.jhu.edu>
  * Make XMonad.Prompt use the main event loop

Fri Nov 18 14:30:13 EST 2011  Nathaniel Wesley Filardo <nwf@cs.jhu.edu>
  * Export adjustUrgents from XMonad.Hooks.UrgencyHook

New patches:

[Use messageHook in Util.EZConfig
Nathaniel Wesley Filardo <nwf@cs.jhu.edu>**20101103195505
 Ignore-this: 1e564495fbcecd3d1444f21d98183c25
] {
hunk ./XMonad/Util/EZConfig.hs 706
 checkKeymap :: XConfig l -> [(String, a)] -> X ()
 checkKeymap conf km = warn (doKeymapCheck conf km)
   where warn ([],[])   = return ()
-        warn (bad,dup) = spawn $ "xmessage 'Warning:\n"
+        warn (bad,dup) = do
+                         mh <- asks (messageHook.config)
+                         mh $ "Warning:\n"
                             ++ msg "bad" bad ++ "\n"
hunk ./XMonad/Util/EZConfig.hs 710
-                            ++ msg "duplicate" dup ++ "'"
+                            ++ msg "duplicate" dup
         msg _ [] = ""
         msg m xs = m ++ " keybindings detected: " ++ showBindings xs
         showBindings = unwords . map (("\""++) . (++"\""))
}
[Use messageHook in Util.NamedActions
Nathaniel Wesley Filardo <nwf@cs.jhu.edu>**20101103195518
 Ignore-this: 5457d8aed1bf22410c90305be0c1f1e4
] {
hunk ./XMonad/Util/NamedActions.hs 46
 
 import XMonad.Actions.Submap(submap)
 import XMonad
-import System.Posix.Process(executeFile)
 import Control.Arrow(Arrow((&&&), second, (***)))
 import Data.Bits(Bits((.&.), complement))
 import Data.List (groupBy)
hunk ./XMonad/Util/NamedActions.hs 203
 
 -- | An action to send to 'addDescrKeys' for showing the keybindings. See also 'showKm' and 'showKmSimple'
 xMessage :: [((KeyMask, KeySym), NamedAction)] -> NamedAction
-xMessage x = addName "Show Keybindings" $ io $ do
-    xfork $ executeFile "xmessage" True ["-default", "okay", unlines $ showKm x] Nothing
+xMessage x = addName "Show Keybindings" $ do
+    mh <- asks (messageHook.config)
+    mh $ unlines $ showKm x
     return ()
 
 -- | Merge the supplied keys with 'defaultKeysDescr', also adding a keybinding
}
[Add ppOverride to Hooks.DynamicLog
Nathaniel Wesley Filardo <nwf@cs.jhu.edu>**20110927222053
 Ignore-this: ab1a39c1c1ad87692c81e824dac8cae6
] {
hunk ./XMonad/Actions/TopicSpace.hs 257
         add_depth proj topic = proj pp . (((topic++":")++) . show) . depth $ topic
         pp' = pp { ppHidden = add_depth ppHidden, ppVisible = add_depth ppVisible }
         sortWindows = take maxDepth . sortBy (comparing $ depth . W.tag)
-    return $ DL.pprWindowSet sortWindows urgents pp' winset
+    DL.pprWindowSet sortWindows urgents pp' winset
 
 -- | Given a prompt configuration and a topic configuration, triggers the action associated with
 -- the topic given in prompt.
hunk ./XMonad/Hooks/DynamicLog.hs 60
 -- Useful imports
 
 import Codec.Binary.UTF8.String (encodeString)
-import Control.Monad (liftM2)
+import Control.Monad (liftM, liftM2)
 import Data.Char ( isSpace, ord )
 import Data.List (intersperse, isPrefixOf, sortBy)
 import Data.Maybe ( isJust, catMaybes )
hunk ./XMonad/Hooks/DynamicLog.hs 271
     let ld = description . S.layout . S.workspace . S.current $ winset
 
     -- workspace list
-    let ws = pprWindowSet sort' urgents pp winset
+    ws <- pprWindowSet sort' urgents pp winset
 
     -- window title
     wt <- maybe (return "") (fmap show . getName) . S.peek $ winset
hunk ./XMonad/Hooks/DynamicLog.hs 289
 -- | Format the workspace information, given a workspace sorting function,
 --   a list of urgent windows, a pretty-printer format, and the current
 --   WindowSet.
-pprWindowSet :: WorkspaceSort -> [Window] -> PP -> WindowSet -> String
-pprWindowSet sort' urgents pp s = sepBy (ppWsSep pp) . map fmt . sort' $
+pprWindowSet :: WorkspaceSort -> [Window] -> PP -> WindowSet -> X String
+pprWindowSet sort' urgents pp s = liftM (sepBy (ppWsSep pp))
+                                   . mapM fmt . sort' $
             map S.workspace (S.current s : S.visible s) ++ S.hidden s
    where this     = S.currentTag s
          visibles = map (S.tag . S.workspace) (S.visible s)
hunk ./XMonad/Hooks/DynamicLog.hs 296
 
-         fmt w = printer pp (S.tag w)
+         fmt w = do
+             movrd <- ppOverride pp w
+             return $ maybe (printer pp (S.tag w)) (id) movrd
           where printer | any (\x -> maybe False (== S.tag w) (S.findTag x s)) urgents  = ppUrgent
                         | S.tag w == this                                               = ppCurrent
                         | S.tag w `elem` visibles                                       = ppVisible
hunk ./XMonad/Hooks/DynamicLog.hs 426
                -- ^ how to print tags of empty hidden workspaces
              , ppUrgent :: WorkspaceId -> String
                -- ^ format to be applied to tags of urgent workspaces.
+             , ppOverride :: WindowSpace -> X (Maybe String)
+               -- ^ an optional override for formating of workspaces
              , ppSep :: String
                -- ^ separator to use between different log sections
                -- (window name, layout, workspaces)
hunk ./XMonad/Hooks/DynamicLog.hs 473
                , ppHidden          = id
                , ppHiddenNoWindows = const ""
                , ppUrgent          = id
+               , ppOverride        = \_ -> return Nothing
                , ppSep             = " : "
                , ppWsSep           = " "
                , ppTitle           = shorten 80
}
[Add spawnPipePid
Nathaniel Wesley Filardo <nwf@cs.jhu.edu>**20111118192049
 Ignore-this: dd170973d9496af1b9872ec2124306cd
] {
hunk ./XMonad/Util/Run.hs 29
                           runInTerm,
                           safeRunInTerm,
                           seconds,
+                          spawnPipePid,
                           spawnPipe,
 
                           hPutStr, hPutStrLn  -- re-export for convenience
hunk ./XMonad/Util/Run.hs 38
 import Codec.Binary.UTF8.String
 import System.Posix.IO
 import System.Posix.Process (createSession, executeFile, forkProcess)
+import System.Posix.Types (ProcessID)
 import Control.Concurrent (threadDelay)
 import System.IO
 import System.Process (runInteractiveProcess)
hunk ./XMonad/Util/Run.hs 140
 safeRunInTerm :: String -> String -> X ()
 safeRunInTerm options command = asks (terminal . config) >>= \t -> safeSpawn t [options, " -e " ++ command]
 
--- | Launch an external application through the system shell and return a @Handle@ to its standard input.
-spawnPipe :: MonadIO m => String -> m Handle
-spawnPipe x = io $ do
+spawnPipePid :: MonadIO m => String -> m (Handle, ProcessID)
+spawnPipePid x = io $ do
     (rd, wr) <- createPipe
     setFdOption wr CloseOnExec True
     h <- fdToHandle wr
hunk ./XMonad/Util/Run.hs 146
     hSetBuffering h LineBuffering
-    _ <- xfork $ do
-          _ <- dupTo rd stdInput
-          executeFile "/bin/sh" False ["-c", encodeString x] Nothing
+    pid <- xfork $ do
+        dupTo rd stdInput
+        executeFile "/bin/sh" False ["-c", x] Nothing
     closeFd rd
hunk ./XMonad/Util/Run.hs 150
-    return h
+    return (h, pid)
+
+-- | Launch an external application through the system shell and return a @Handle@ to its standard input.
+spawnPipe :: MonadIO m => String -> m Handle
+spawnPipe = liftM fst . spawnPipePid
}
[Support for filters in XMonad.Prompt.Window
Nathaniel Wesley Filardo <nwf@cs.jhu.edu>**20111118192444
 Ignore-this: ff4e06cdc25cf3a08b6af8992298681e
] {
hunk ./XMonad/Prompt/Window.hs 24
     windowPromptGoto,
     windowPromptBring,
     windowPromptBringCopy,
+
+    WindowFilter,
+    windowPromptGotoF,
+    windowPromptBringF,
+    windowPromptBringCopyF,
+
+    windowPromptGotoCurrent,
     WindowPrompt,
     ) where
 
hunk ./XMonad/Prompt/Window.hs 34
+import Control.Monad
 import qualified Data.Map as M
 
 import qualified XMonad.StackSet as W
hunk ./XMonad/Prompt/Window.hs 70
 -- For detailed instruction on editing the key binding see
 -- "XMonad.Doc.Extending#Editing_key_bindings".
 
+type WindowFilter = String -> Window -> Bool
 data WindowPrompt = Goto | Bring | BringCopy
 instance XPrompt WindowPrompt where
     showXPrompt Goto      = "Go to window: "
hunk ./XMonad/Prompt/Window.hs 80
     nextCompletion      _ = getNextCompletion
 
 windowPromptGoto, windowPromptBring, windowPromptBringCopy :: XPConfig -> X ()
-windowPromptGoto  = doPrompt Goto
-windowPromptBring = doPrompt Bring
-windowPromptBringCopy = doPrompt BringCopy
+windowPromptGoto  = doPrompt Goto Nothing
+windowPromptBring = doPrompt Bring Nothing
+windowPromptBringCopy = doPrompt BringCopy Nothing
+
+windowPromptGotoF, windowPromptBringF, windowPromptBringCopyF
+    :: X WindowFilter -> XPConfig -> X()
+windowPromptGotoF = doPrompt Goto . Just
+windowPromptBringF = doPrompt Bring . Just
+windowPromptBringCopyF = doPrompt BringCopy . Just
+
+currentTagFilter :: X WindowFilter
+currentTagFilter = do
+                    cws <- gets windowset
+                    let ct = W.currentTag cws
+                    return $ \_ w -> maybe False (== ct) (W.findTag w cws)
+
+windowPromptGotoCurrent :: XPConfig -> X()
+windowPromptGotoCurrent = windowPromptGotoF currentTagFilter
 
 -- | Pops open a prompt with window titles. Choose one, and you will be
 -- taken to the corresponding workspace.
hunk ./XMonad/Prompt/Window.hs 101
-doPrompt :: WindowPrompt -> XPConfig -> X ()
-doPrompt t c = do
+doPrompt :: WindowPrompt -> Maybe (X WindowFilter) -> XPConfig -> X ()
+doPrompt t mxf c = do
   a <- case t of
          Goto  -> fmap gotoAction  windowMap
          Bring -> fmap bringAction windowMap
hunk ./XMonad/Prompt/Window.hs 108
          BringCopy -> fmap bringCopyAction windowMap
   wm <- windowMap
-  mkXPrompt t c (compList wm) a
+  cm <- maybe (return wm) (liftM $ flip M.filterWithKey wm) mxf
+  mkXPrompt t c (compList cm) a
 
     where
       winAction a m    = flip whenJust (windows . a) . flip M.lookup m
}
[Make XMonad.Prompt use the main event loop
Nathaniel Wesley Filardo <nwf@cs.jhu.edu>**20111118192912
 Ignore-this: 13890606f1edf4076c5f78b95cdc850e
] {
hunk ./XMonad/Hooks/DynamicLog.hs 203
     h <- spawnPipe cmd
     return $ conf
         { layoutHook = avoidStruts (layoutHook conf)
-        , logHook = do
-                        logHook conf
-                        dynamicLogWithPP pp { ppOutput = hPutStrLn h }
+        , logHook = do logHook conf
+                       dynamicLogWithPP (pp { ppOutput = hPutStrLn h })
         , manageHook = manageHook conf <+> manageDocks
         , keys       = liftM2 M.union keys' (keys conf)
         }
hunk ./XMonad/Hooks/EwmhDesktops.hs 120
 --
 --  * _NET_ACTIVE_WINDOW (activate another window, changing workspace if needed)
 --
-ewmhDesktopsEventHook :: Event -> X All
-ewmhDesktopsEventHook e = handle e >> return (All True)
+ewmhDesktopsEventHook :: EventHook
+ewmhDesktopsEventHook _ e = handle e >> return (All True)
 
 handle :: Event -> X ()
 handle ClientMessageEvent {
hunk ./XMonad/Hooks/EwmhDesktops.hs 163
 -- An event hook to handle applications that wish to fullscreen using the
 -- _NET_WM_STATE protocol. This includes users of the gtk_window_fullscreen()
 -- function, such as Totem, Evince and OpenOffice.org.
-fullscreenEventHook :: Event -> X All
-fullscreenEventHook (ClientMessageEvent _ _ _ dpy win typ (action:dats)) = do
+fullscreenEventHook :: EventHook
+fullscreenEventHook _ (ClientMessageEvent _ _ _ dpy win typ (action:dats)) = do
   state <- getAtom "_NET_WM_STATE"
   fullsc <- getAtom "_NET_WM_STATE_FULLSCREEN"
   wstate <- fromMaybe [] `fmap` getProp32 state win
hunk ./XMonad/Hooks/EwmhDesktops.hs 188
 
   return $ All True
 
-fullscreenEventHook _ = return $ All True
+fullscreenEventHook _ _ = return $ All True
 
 setNumberOfDesktops :: (Integral a) => a -> X ()
 setNumberOfDesktops n = withDisplay $ \dpy -> do
hunk ./XMonad/Hooks/Minimize.hs 39
 -- > main = xmonad defaultConfig { layoutHook = myLayout
 -- >                             , handleEventHook = myHandleEventHook }
 
-minimizeEventHook :: Event -> X All
-minimizeEventHook (ClientMessageEvent {ev_window = w,
+minimizeEventHook :: EventHook
+minimizeEventHook _ (ClientMessageEvent {ev_window = w,
                                        ev_message_type = mt,
                                        ev_data = dt}) = do
     a_aw <- getAtom "_NET_ACTIVE_WINDOW"
hunk ./XMonad/Hooks/Minimize.hs 53
       when (message == iconicState) $ minimizeWindow w
 
     return (All True)
-minimizeEventHook _ = return (All True)
+minimizeEventHook _ _ = return (All True)
hunk ./XMonad/Hooks/PositionStoreHooks.hs 101
         randomIntOffset :: X (Int)
         randomIntOffset = io $ randomRIO (42, 242)
 
-positionStoreEventHook :: Event -> X All
-positionStoreEventHook (DestroyWindowEvent {ev_window = w, ev_event_type = et}) = do
+positionStoreEventHook :: EventHook
+positionStoreEventHook _ (DestroyWindowEvent {ev_window = w, ev_event_type = et}) = do
     when (et == destroyNotify) $ do
         modifyPosStore (\ps -> posStoreRemove ps w)
     return (All True)
hunk ./XMonad/Hooks/PositionStoreHooks.hs 106
-positionStoreEventHook _ = return (All True)
+positionStoreEventHook _ _ = return (All True)
hunk ./XMonad/Hooks/ServerMode.hs 89
 
 -- | Executes a command of the list when receiving its index via a special ClientMessageEvent
 -- (indexing starts at 1)
-serverModeEventHook :: Event -> X All
+serverModeEventHook :: EventHook
 serverModeEventHook = serverModeEventHook' defaultCommands
 
 -- | serverModeEventHook' additionally takes an action to generate the list of
hunk ./XMonad/Hooks/ServerMode.hs 94
 -- commands.
-serverModeEventHook' :: X [(String,X ())] -> Event -> X All
-serverModeEventHook' cmdAction (ClientMessageEvent {ev_message_type = mt, ev_data = dt}) = do
+serverModeEventHook' :: X [(String,X ())] -> EventHook
+serverModeEventHook' cmdAction _ (ClientMessageEvent {ev_message_type = mt, ev_data = dt}) = do
         d <- asks display
         a <- io $ internAtom d "XMONAD_COMMAND" False
         when (mt == a && dt /= []) $ do
hunk ./XMonad/Hooks/ServerMode.hs 105
                   Just (_,action) -> action
                   Nothing         -> mapM_ (io . hPutStrLn stderr) . listOfCommands $ cl
         return (All True)
-serverModeEventHook' _ _ = return (All True)
+serverModeEventHook' _ _ _ = return (All True)
hunk ./XMonad/Hooks/UrgencyHook.hs 85
 import Data.Bits (testBit)
 import Data.List (delete, (\\))
 import Data.Maybe (listToMaybe, maybeToList)
+import Foreign.Ptr (Ptr)
 import qualified Data.Set as S
 
 -- $usage
hunk ./XMonad/Hooks/UrgencyHook.hs 329
 -- ourselves, allowing us to clear urgency when a window is visible, and not to
 -- set urgency if a window is visible. If you have a better idea, please, let us
 -- know!
-handleEvent :: UrgencyHook h => WithUrgencyHook h -> Event -> X ()
-handleEvent wuh event =
+handleEvent :: UrgencyHook h => WithUrgencyHook h -> Ptr XEvent -> Event -> X ()
+handleEvent wuh _ event =
     case event of
       PropertyEvent { ev_event_type = t, ev_atom = a, ev_window = w } -> do
           when (t == propertyNotify && a == wM_HINTS) $ withDisplay $ \dpy -> do
hunk ./XMonad/Layout/Fullscreen.hs 175
 fullscreenFloatRect r = ModifiedLayout $ FullscreenFloat r M.empty
 
 -- | The event hook required for the layout modifiers to work
-fullscreenEventHook :: Event -> X All
-fullscreenEventHook (ClientMessageEvent _ _ _ dpy win typ (action:dats)) = do
+fullscreenEventHook :: EventHook
+fullscreenEventHook _ (ClientMessageEvent _ _ _ dpy win typ (action:dats)) = do
   state <- getAtom "_NET_WM_STATE"
   fullsc <- getAtom "_NET_WM_STATE_FULLSCREEN"
   wstate <- fromMaybe [] `fmap` getProp32 state win
hunk ./XMonad/Layout/Fullscreen.hs 199
       sendMessage FullscreenChanged
   return $ All True
 
-fullscreenEventHook (DestroyWindowEvent {ev_window = w}) = do
+fullscreenEventHook _ (DestroyWindowEvent {ev_window = w}) = do
   -- When a window is destroyed, the layouts should remove that window
   -- from their states.
   broadcastMessage $ RemoveFullscreen w
hunk ./XMonad/Layout/Fullscreen.hs 207
   sendMessageWithNoRefresh FullscreenChanged cw
   return $ All True
 
-fullscreenEventHook _ = return $ All True
+fullscreenEventHook _ _ = return $ All True
 
 -- | Manage hook that sets the fullscreen property for
 -- windows that are initially fullscreen
hunk ./XMonad/Prompt.hs 1
+{-# LANGUAGE DeriveDataTypeable #-}
 {-# LANGUAGE ExistentialQuantification #-}
hunk ./XMonad/Prompt.hs 3
+{-# LANGUAGE Rank2Types #-}
 -----------------------------------------------------------------------------
 -- |
 -- Module      :  XMonad.Prompt
hunk ./XMonad/Prompt.hs 22
     ( -- * Usage
       -- $usage
       mkXPrompt
-    , mkXPromptWithReturn
+    , eventHandle
     , amberXPConfig
     , defaultXPConfig
     , greenXPConfig
hunk ./XMonad/Prompt.hs 75
 import XMonad  hiding (config, cleanMask)
 import qualified XMonad as X (numberlockMask)
 import qualified XMonad.StackSet as W
+import qualified XMonad.Util.ExtensibleState as XS
 import XMonad.Util.Font
 import XMonad.Util.Types
 import XMonad.Util.XSelection (getSelection)
hunk ./XMonad/Prompt.hs 91
 import Data.IORef
 import Data.List
 import Data.Maybe (fromMaybe)
+import Data.Monoid (All(..))
 import Data.Set (fromList, toList)
 import System.Directory (getAppUserDataDirectory)
 import System.IO
hunk ./XMonad/Prompt.hs 120
         , gcon               :: !GC
         , fontS              :: !XMonadFont
         , xptype             :: !XPType
+        , history            :: History
         , commandHistory     :: W.Stack String
         , offset             :: !Int
         , config             :: XPConfig
hunk ./XMonad/Prompt.hs 127
         , successful         :: Bool
         , numlockMask        :: KeyMask
         , done               :: Bool
+        , stepfn             :: KeyStroke -> Event -> XP ()
+        , sact               :: String -> X ()
+        , fact               :: X ()
         }
 
 data XPConfig =
hunk ./XMonad/Prompt.hs 238
 type ComplFunction = String -> IO [String]
 
 initState :: XPrompt p => Display -> Window -> Window -> Rectangle -> ComplFunction
-          -> GC -> XMonadFont -> p -> [String] -> XPConfig -> KeyMask -> XPState
-initState d rw w s compl gc fonts pt h c nm =
+          -> GC -> XMonadFont -> p -> History -> [String] -> XPConfig -> KeyMask
+          -> (KeyStroke -> Event -> XP ()) -> (String -> X()) -> X () -> XPState
+initState d rw w s compl gc fonts pt h hs c nm st sa fa =
     XPS { dpy                = d
         , rootw              = rw
         , win                = w
hunk ./XMonad/Prompt.hs 252
         , gcon               = gc
         , fontS              = fonts
         , xptype             = XPT pt
+        , history            = h
         , commandHistory     = W.Stack { W.focus = defaultText c
                                        , W.up    = []
hunk ./XMonad/Prompt.hs 255
-                                       , W.down  = h }
+                                       , W.down  = hs }
         , offset             = length (defaultText c)
         , config             = c
         , successful         = False
hunk ./XMonad/Prompt.hs 261
         , done               = False
         , numlockMask        = nm
+        , stepfn             = st
+        , sact               = sa
+        , fact               = fa
         }
 
 -- this would be much easier with functional references
hunk ./XMonad/Prompt.hs 282
 getInput :: XP String
 getInput = gets command
 
--- | Same as 'mkXPrompt', except that the action function can have
---   type @String -> X a@, for any @a@, and the final action returned
---   by 'mkXPromptWithReturn' will have type @X (Maybe a)@.  @Nothing@
---   is yielded if the user cancels the prompt (by e.g. hitting Esc or
---   Ctrl-G).  For an example of use, see the 'XMonad.Prompt.Input'
---   module.
-mkXPromptWithReturn :: XPrompt p => p -> XPConfig -> ComplFunction -> (String -> X a)  -> X (Maybe a)
-mkXPromptWithReturn t conf compl action = do
-  XConf { display = d, theRoot = rw } <- ask
-  s    <- gets $ screenRect . W.screenDetail . W.current . windowset
-  hist <- io readHistory
-  w    <- io $ createWin d rw conf s
-  io $ selectInput d w $ exposureMask .|. keyPressMask
-  gc <- io $ createGC d w
-  io $ setGraphicsExposures d gc False
-  fs <- initXMF (font conf)
-  numlock <- gets $ X.numberlockMask
-  let hs = fromMaybe [] $ M.lookup (showXPrompt t) hist
-      st = initState d rw w s compl gc fs (XPT t) hs conf numlock
-  st' <- io $ execStateT runXP st
-
-  releaseXMF fs
-  io $ freeGC d gc
-  if successful st'
-    then do
-      let prune = take (historySize conf)
-      io $ writeHistory $ M.insertWith
-                                (\xs ys -> prune . historyFilter conf $ xs ++ ys)
-                                (showXPrompt t)
-                                (prune $ historyFilter conf [command st'])
-                                hist
-                                -- we need to apply historyFilter before as well, since
-                                -- otherwise the filter would not be applied if
-                                -- there is no history
-      Just <$> action (command st')
-    else return Nothing
-
 -- | Creates a prompt given:
 --
 -- * a prompt type, instance of the 'XPrompt' class.
hunk ./XMonad/Prompt.hs 294
 --
 -- * an action to be run: the action must take a string and return 'XMonad.X' ()
 mkXPrompt :: XPrompt p => p -> XPConfig -> ComplFunction -> (String -> X ()) -> X ()
-mkXPrompt t conf compl action = mkXPromptWithReturn t conf compl action >> return ()
+mkXPrompt t conf compl action = mkXPromptWithFail t conf compl action (return ())
 
hunk ./XMonad/Prompt.hs 296
-runXP :: XP ()
-runXP = do
-  (d,w) <- gets (dpy &&& win)
-  status <- io $ grabKeyboard d w True grabModeAsync grabModeAsync currentTime
-  when (status == grabSuccess) $ do
-          updateWindows
-          eventLoop handle
-          io $ ungrabKeyboard d currentTime
-  io $ destroyWindow d w
-  destroyComplWin
-  io $ sync d False
+-- | Like mkXPrompt but allows the caller to specify a hook for when the
+-- prompt is not successful.
+mkXPromptWithFail :: XPrompt p => p -> XPConfig -> ComplFunction
+                  -> (String -> X ())
+                  -> X ()
+                  -> X ()
+mkXPromptWithFail t conf compl act af = do
+  XConf { display = d, theRoot = rw } <- ask
+  s    <- gets $ screenRect . W.screenDetail . W.current . windowset
+  hist <- io readHistory
+  w    <- io $ createWin d rw conf s
+  io $ selectInput d w $ exposureMask .|. keyPressMask
+  gc <- io $ createGC d w
+  io $ setGraphicsExposures d gc False
+  fs <- initXMF (font conf)
+  nl <- gets $ X.numberlockMask
+  let hs = fromMaybe [] $ M.lookup (showXPrompt t) hist
+      st = initState d rw w s compl gc fs (XPT t) hist hs conf nl handle act af
+
+  (PM m) <- XS.get
+  let m' = M.insert w st m
+  XS.put (PM m')
 
 type KeyStroke = (KeySym, String)
 
hunk ./XMonad/Prompt.hs 321
-eventLoop :: (KeyStroke -> Event -> XP ()) -> XP ()
-eventLoop action = do
-  d <- gets dpy
-  (keysym,string,event) <- io $
-            allocaXEvent $ \e -> do
-              maskEvent d (exposureMask .|. keyPressMask) e
-              ev <- getEvent e
-              (ks,s) <- if ev_event_type ev == keyPress
-                        then lookupString $ asKeyEvent e
-                        else return (Nothing, "")
-              return (ks,s,ev)
-  action (fromMaybe xK_VoidSymbol keysym,string) event
-  gets done >>= flip unless (eventLoop handle)
+newtype PM = PM (M.Map Window XPState) deriving (Typeable)
+instance ExtensionClass PM where
+  initialValue = PM (M.empty) 
+  extensionType = StateExtension
+
+eventHandle :: EventHook
+eventHandle ep e = do
+  (PM m) <- XS.get
+  mw <- liftM W.peek $ gets windowset
+  case mw of
+    Nothing -> return () 
+    Just w -> case M.lookup w m of
+                Nothing -> return ()
+                Just s -> do
+                    ks <- liftM (first (fromMaybe xK_VoidSymbol)) $
+                                 if ev_event_type e == keyPress
+                                  then liftIO $ lookupString $ asKeyEvent ep
+                                  else return (Nothing, "")
+                    (f,s') <- io $ flip runStateT s $ do
+                                    a <- gets stepfn
+                                    a ks e
+                                    gets done
+                    if f
+                     then do
+                        XS.put$PM$M.delete w m
+                        let d = (dpy s')
+                        io $ destroyWindow d w
+                        io $ runStateT destroyComplWin s'
+                        io $ sync d False
+
+                        releaseXMF (fontS s')
+                        io $ freeGC d (gcon s')
+                        if successful s'
+                         then do
+                               let conf = config s'
+                               let prune = take (historySize conf)
+                               io $ writeHistory $ M.insertWith
+                                 (\xs ys -> prune . historyFilter conf $ xs ++ ys)
+                                 (showXPrompt$xptype s')
+                                 (prune $ historyFilter conf [command s'])
+                                 (history s')
+                                 -- we need to apply historyFilter before as well, since
+                                 -- otherwise the filter would not be applied if
+                                 -- there is no history
+                               sact s' (command s')
+                         else fact s'
+                     else
+                        XS.put$PM$M.insert w s' m
+  return$All True
 
 -- | Removes numlock and capslock from a keymask.
 -- Duplicate of cleanMask from core, but in the
hunk ./XMonad/Prompt.hs 380
   let highMasks = 1 `shiftL` 12 - 1
   return (complement (numlock .|. lockMask) .&. msk .&. highMasks)
 
+
 -- Main event handler
hunk ./XMonad/Prompt.hs 382
-handle :: KeyStroke -> Event -> XP ()
+handle :: (KeySym, String) -> Event -> StateT XPState IO ()
 handle ks@(sym,_) e@(KeyEvent {ev_event_type = t, ev_state = m}) = do
   complKey <- gets $ completionKey . config
   c <- getCompletions
hunk ./XMonad/Prompt.hs 407
                     let new_command = nextCompletion (xptype st) (command st) l
                     in modify $ \s -> setCommand new_command $ s { offset = length new_command }
                 updateWins  l = redrawWindows l >>
-                                eventLoop (completionHandle l)
+                                setStepFn (completionHandle l)
             case c of
hunk ./XMonad/Prompt.hs 409
-              []  -> updateWindows   >> eventLoop handle
+              []  -> updateWindows   >> setStepFn handle
               [x] -> updateState [x] >> getCompletions >>= updateWins
               l   -> updateState l   >> updateWins l
hunk ./XMonad/Prompt.hs 412
-      | t == keyRelease && sym == complKey -> eventLoop (completionHandle c)
+      | t == keyRelease && sym == complKey -> setStepFn (completionHandle c)
       | otherwise -> keyPressHandle m ks -- some other key, handle it normally
 -- some other event: go back to main loop
hunk ./XMonad/Prompt.hs 415
-completionHandle _ k e = handle k e
+completionHandle _ _ _ = return ()
 
 
 tryAutoComplete :: XP Bool
hunk ./XMonad/Prompt.hs 475
   case M.lookup (kmask,ks) km of
     Just action -> action >> updateWindows
     Nothing -> case str of
-                 "" -> eventLoop handle
+                 "" -> setStepFn handle
                  _ -> when (kmask .&. controlMask == 0) $ do
                                  insertString (decodeString str)
                                  updateWindows
hunk ./XMonad/Prompt.hs 488
 setDone :: Bool -> XP ()
 setDone b = modify $ \s -> s { done = b }
 
+setStepFn :: (KeyStroke -> Event -> XP ()) -> XP ()
+setStepFn h = modify $ \s -> s { stepfn = h }
+
 -- KeyPress and State
 
 -- | Quit.
hunk ./XMonad/Prompt/Email.hs 59
 --   of addresses for autocompletion.
 emailPrompt :: XPConfig -> [String] -> X ()
 emailPrompt c addrs =
-    inputPromptWithCompl c "To" (mkComplFunFromList addrs) ?+ \to ->
-    inputPrompt c "Subject" ?+ \subj ->
-    inputPrompt c "Body" ?+ \body ->
+    inputPromptWithCompl c "To" (mkComplFunFromList addrs) $ \to ->
+    inputPrompt c "Subject" $ \subj ->
+    inputPrompt c "Body" $ \body ->
     runProcessWithInput "mail" ["-s", subj, to] (body ++ "\n")
          >> return ()
hunk ./XMonad/Prompt/Input.hs 21
                             -- $usage
                             inputPrompt,
                             inputPromptWithCompl,
-                            (?+),
                             InputPrompt,
                            ) where
 
hunk ./XMonad/Prompt/Input.hs 47
 -- just wants a convenient way to provide the input for this function
 -- from within xmonad.  Here is where the "XMonad.Prompt.Input" module
 -- comes into play.  He can use the 'inputPrompt' function to create a
--- prompt, and the '?+' operator to compose the prompt with the
--- @fireEmployee@ action, like so:
+-- prompt around the @fireEmployee@ action, like so:
 --
 -- > firingPrompt :: X ()
hunk ./XMonad/Prompt/Input.hs 50
--- > firingPrompt = inputPrompt defaultXPConfig \"Fire\" ?+ fireEmployee
+-- > firingPrompt = inputPrompt defaultXPConfig \"Fire\" fireEmployee
 --
 -- If @employees@ contains a list of all his employees, he could also
 -- create an autocompleting version, like this:
hunk ./XMonad/Prompt/Input.hs 56
 --
 -- > firingPrompt' = inputPromptWithCompl defaultXPConfig \"Fire\"
--- >                     (mkComplFunFromList employees) ?+ fireEmployee
+-- >                     (mkComplFunFromList employees) fireEmployee
 --
 -- Now all he has to do is add a keybinding to @firingPrompt@ (or
 -- @firingPrompt'@), such as
hunk ./XMonad/Prompt/Input.hs 89
 --   (Maybe String)@, which reflects the fact that the user might
 --   cancel the prompt (resulting in @Nothing@), or enter an input
 --   string @s@ (resulting in @Just s@).
-inputPrompt :: XPConfig -> String -> X (Maybe String)
+inputPrompt :: XPConfig -> String -> (String -> X ()) -> X () 
 inputPrompt c p = inputPromptWithCompl c p (const (return []))
 
 -- | The same as 'inputPrompt', but with a completion function.  The
hunk ./XMonad/Prompt/Input.hs 97
 --   "XMonad.Prompt".  The 'mkComplFunFromList' utility function, also
 --   defined in "XMonad.Prompt", is useful for creating such a
 --   function from a known list of possibilities.
-inputPromptWithCompl :: XPConfig -> String -> ComplFunction -> X (Maybe String)
-inputPromptWithCompl c p compl = mkXPromptWithReturn (InputPrompt p) c compl return
-
+inputPromptWithCompl :: XPConfig -> String -> ComplFunction -> (String -> X ()) -> X ()
+inputPromptWithCompl c p compl = mkXPrompt (InputPrompt p) c compl
 
hunk ./XMonad/Prompt/Input.hs 100
+{-
 infixr 1 ?+
 
 -- | A combinator for hooking up an input prompt action to a function
hunk ./XMonad/Prompt/Input.hs 114
 --   want to move it to a different module, be my guest.
 (?+) :: (Monad m) => m (Maybe a) -> (a -> m ()) -> m ()
 x ?+ k = x >>= maybe (return ()) k
+-}
+
}
[Export adjustUrgents from XMonad.Hooks.UrgencyHook
Nathaniel Wesley Filardo <nwf@cs.jhu.edu>**20111118193013
 Ignore-this: 21404628542c8c9dbac34fd485e3a3c2
] hunk ./XMonad/Hooks/UrgencyHook.hs 70
                                  SpawnUrgencyHook(..),
                                  UrgencyHook(urgencyHook),
                                  Interval,
+                                 adjustUrgents
                                  ) where
 
 import XMonad

Context:

[Export types to reduce haddock warnings.
Adam Vogt <vogt.adam@gmail.com>**20101023195755
 Ignore-this: 1cac9202784711ce0fc902d14543bab0
] 
[Be consistent with core utf8-string usage.
Adam Vogt <vogt.adam@gmail.com>**20111118184745
 Ignore-this: 9de0599d0fb888c58e11598d4de9599e
 
 Now that spawn assumes executeFile takes a String containing utf8 codepoints
 (and takes an actual String as input) adjust Prompt.Shell to avoid double
 encoding. U.Run functions are updated to be consistent with spawn.
] 
[Export types to improve haddock links.
Adam Vogt <vogt.adam@gmail.com>**20111118190642
 Ignore-this: 254c5a6941009701dc444043b0eeace5
] 
[Better control over GridVariants geometry
nzeh@cs.dal.ca**20110907133304
 Ignore-this: 59da789a28f702595159eeb6ddd30fd9
 
 Added new messages the layout understands to allow changing the grid aspect
 ratio and setting the fraction of the master to a given value rather than
 changing it relative to the current value.
] 
[Support for scratchpad applications with multiple windows
Norbert Zeh <nzeh@cs.dal.ca>**20110406140213
 Ignore-this: 4c7d5f2ff95292438464e0b1060ab324
 
 I recently found that I use xpad to add sticky notes to my desktop.  I wanted
 to be able to show/hide these in the same fashion as regular scratchpads.  This
 patch adds a function that allows to do this while reusing most of the existing
 NamedScratchpad code.
] 
[Additional messages for SplitGrid layout
Norbert Zeh <nzeh@cs.dal.ca>**20091215192142
 Ignore-this: eb945168d1c420e5a9ed87da12a7acf8
 
 This patch introduces two new message SetMasterRows and SetMasterCols for the
 X.GridVariants.SplitGrid layout, which set the number of rows/columns in the
 master grid to the given value.  This is useful when setting the number of rows
 and/or columns non-incrementally using an interface such as GridSelect.
] 
[documentation patch: note the drawbacks of X.U.Dmenu
Daniel Wagner <daniel@wagner-home.com>**20111115022726
 Ignore-this: 97f9676ca075a6f96e090045886083ca
] 
[get ready for GHC 7.4: Num a no longer implies (Eq a, Show a)
Daniel Wagner <daniel@wagner-home.com>**20111115022650
 Ignore-this: faa34d69ddd27b98c6507740b42c9e97
] 
[Correct completions of utf8-named file in X.P.Shell
Adam Vogt <vogt.adam@gmail.com>**20111111215655
 Ignore-this: 9aa10143f313b06afdb11e61777a7d20
] 
[Expose X.L.Groups.Helpers and Groups.Wmii in xmonad-contrib.cabal
Wirt Wolff <wirtwolff@gmail.com>**20111104053703
 Ignore-this: fd50e32f61af64b9e53701787cebcd97
 
 They provide many useful exports and are linked from X.L.Groups so promote
 them from other-modules or missing status.
] 
[Small bugfix to XMonad.Layout.Fullscreen
Audun Skaugen <audun@skaugen.name>**20111023102940
 Ignore-this: adcfedf11b40be2cdd61f615551e0ae
 
 Fixed a small bug in the layout modifers where 
 windows entering fullscreen were not refreshed.
 
 Also fixed some funny whitespace characters.
] 
[documentation patch: add a bit more context to the code snippets in X.L.IndependentScreens
Daniel Wagner <daniel@wagner-home.com>**20111011204619
 Ignore-this: cbb03927204aa3c01aa9bea067d37bce
] 
[U.EZConfig allow removing more than one mouse binding.
Adam Vogt <vogt.adam@gmail.com>**20110923123907
 Ignore-this: 6f32ef805566f03977ea5c0fe0ace958
] 
[Remove X.A.GroupNavigation.currentWindow
Norbert Zeh <nzeh@cs.dal.ca>**20110920083922
 Ignore-this: 4b202a9c9e3a13c5e34862784ea4acfa
 
 This function does the same as X.StackSet.peek and all its uses have been
 replaced with X.StackSet.peek.
] 
[Fix typo in NoBorders example code.
Adam Vogt <vogt.adam@gmail.com>**20110814195314
 Ignore-this: 3ad6aaf287962bfce707b2324de91eec
] 
[Add XF86TouchpadToggle to the list of multimedia keys in X.U.EZConfig
Daniel Schoepe <daniel.schoepe@googlemail.com>**20110917151419
 Ignore-this: 84986d5b16c54199a589ed68842f5191
] 
[documentation patch to XMonad.Doc.Extending
Daniel Wagner <daniel@wagner-home.com>**20110916202845
 Ignore-this: 77998915c337590f127fd4a4b6029029
] 
[fix warnings in X.U.EZConfig
Brent Yorgey <byorgey@cis.upenn.edu>**20110908133246
 Ignore-this: 5322d61eaf30b13e68a5674f8ac7084d
] 
[X.A.CycleWS Refactor and add toggleWS' that excludes listed tags
Wirt Wolff <wirtwolff@gmail.com>**20110907232730
 Ignore-this: bec03fcb6aa16452d3a0425d156823a4
] 
[X.A.FlexibleManipulate: Set expected fixities for Pnt math operators
Wirt Wolff <wirtwolff@gmail.com>**20110904221247
 Ignore-this: 9ae239c4120eae866983ecfe5cc59894
 Restores broken mouseWindow discrete linear and resize to 0.9.1 behavior
] 
[GHC 7 compat
Daniel Wagner <daniel@wagner-home.com>**20110731170850
 Ignore-this: 17a43a709e70ebccc925e016d7057399
 
 * true error: more modules export foldl/foldl'/foldr, so explicitly use the Data.Foldable one
 * -Werror error: transition from Control.OldException to Control.Exception, assuming everything was IOException
 
] 
[Correct H.DynamicLog.dynamicLogXinerama comment. Wuzzeb's patch at issue 466.
Adam Vogt <vogt.adam@gmail.com>**20110714231741
 Ignore-this: 8434fe4c740fc06b5b17f016e28e0376
 
 Slight changes to the patch to 1. work with haddock, and 2. remove ppOutput
 which distracts from the formatting and is covered elsewhere.
] 
[ungrab-keyboard-before-action
Ben Boeckel <mathstuf@gmail.com>**20110515210312
 Ignore-this: 5b8f3c286e8231a4d7ade2acbb2ae84a
 
 If an action that requires the keyboard to be grabbed (e.g., launching dmenu),
 it is a race when submapping the action as to whether the action will have
 access to the keyboard or not. To fix this, the keyboard should be ungrabbed
 before executing the action.
] 
[add-movenext-moveprev-bindings
Ben Boeckel <mathstuf@gmail.com>**20110515193326
 Ignore-this: 2ad1ce1de0c2954b2946551dd62e6b3b
 
 Adds default bindings to GridSelect for the moveNext and movePrev motions.
] 
[X.L.LayoutHints: refresh only if hints are not satisfied
Tomas Janousek <tomi@nomi.cz>**20110615150333
 Ignore-this: e081f5fbd6a721e260212548d830ff6b
] 
[L.Spacing use imported fi
Adam Vogt <vogt.adam@gmail.com>**20110612192339
 Ignore-this: ac3b405e8c43d1b1db58ecf80fafab8e
] 
[Use a phantom type instead of undefined in L.LayoutBuilderP
Adam Vogt <vogt.adam@gmail.com>**20110609051858
 Ignore-this: f9009c339ac20245ca0b1dc8154b673f
 
 This better expresses the idea that the argument to alwaysTrue is just there to
 select an instance. Another option could be to do use a fundep, which seems to
 be compatible with the two instances so far.
 
 class Predicate p w | p -> w
 
] 
[Add more L.LayoutBuilderP documentation
Adam Vogt <vogt.adam@gmail.com>**20110609050922
 Ignore-this: 1441d917c84b165f30711e572e239392
] 
[Correct L.LayoutBuilderP module name in haddock.
Adam Vogt <vogt.adam@gmail.com>**20110609043940
 Ignore-this: 3c322c0767969fa42b1e2c32cf3f8a1a
] 
[Cleanup in X.L.LayoutBuilderP.
Ilya Portnov <portnov84@rambler.ru>**20110514132232
 Ignore-this: 59d9ce37218424e1bc225a42d71982ab
 Remove unused datatype declaration and export usefull typeclass.
] 
[Extend script for generating the code which runs tests
Adam Vogt <vogt.adam@gmail.com>**20110609040722
 Ignore-this: 44ebbee2683f50bc0728458f4babcce
 
 Now the number of runs each can be set, and the failures and successes are
 summarized in the same way as the core Properties.hs. There is some duplicated
 code which could be avoided by modifying Properties.hs.
] 
[Move tests from ManageDocks to tests/
Adam Vogt <vogt.adam@gmail.com>**20110609040220
 Ignore-this: 31d51fae83d88e15cdb69f29da003bf7
 
 The change to use a newtype for RectC is kind of ugly, but this way instances
 are less likely to conflict in the tests.
] 
[Export X.A.CycleWS.screenBy (issue 439)
Adam Vogt <vogt.adam@gmail.com>**20110607002053
 Ignore-this: 2eaa2a852a3356f6163c4d38f72e730f
] 
[X.H.FloatNext: export X.H.ToggleHook.runLogHook
Tomas Janousek <tomi@nomi.cz>**20110528191700
 Ignore-this: 5fd923e800a1a3f0977f126df7882c54
 
 Otherwise the user has to import XMonad.Hooks.ToggleHook as well, which he
 didn't have to in earlier versions.
] 
[Documentation fix (issue 445)
Adam Vogt <vogt.adam@gmail.com>**20110527033521
 Ignore-this: c73b88f9567af86bd560b911e33da301
 
 Daniel's change which broke -Wall (adding an import for haddock only) was
 somehow removed. Instead we can just modify the sample code to add the import.
] 
[X.A.AppendFile documentation fix.
Adam Vogt <vogt.adam@gmail.com>**20110527032854
 Ignore-this: 1ee126ddba1b06d07fba86ca43f74ab8
 
 Forgotten > means haddock complained (and generated incorrect output).
 More controversially I reworded a sentence and use do notation.
] 
[add-willhook-function
Ben Boeckel <mathstuf@gmail.com>**20110515191718
 Ignore-this: 9db50eec5b91baa973b4a92c72aeceaf
 
 Adds a function that hooks into whether the hook will be triggered on the next
 request.
] 
[use-map-in-toggle-hook
Ben Boeckel <mathstuf@gmail.com>**20110515191418
 Ignore-this: 2bf69aa1a875e7ef1748a5ab51b33daa
 
 Use "Data.Map String (Bool, Bool)" instead of "[(String, (Bool, Bool))]" in
 X.H.ToggleHook.
] 
[Extend GridSelect navigation
Ilya Portnov <portnov84@rambler.ru>**20110515154246
 Ignore-this: f2d279b8e46e6eaf3477fdc5cf77be63
 Add moveNext and movePrev, which move selection to next/previous item. 
] 
[Generalize X.L.AutoMaster modifier
Ilya Portnov <portnov84@rambler.ru>**20110514132549
 Ignore-this: 481c35dd721405bab8b085c45cb983ce
 Enable it to work not only with Windows, but with any (Eq) type.
] 
[Aesthetics on Flexiblemanipulate
Mats Rauhala <mats.rauhala@gmail.com>**20110506094431
 Ignore-this: 8864c1ba9723ebcc3b183ea9d636a203
 
 Based on Adam Vogts recommendation on the mailing list. I had to give explicit
 type signatures to get rid of warnings, but nearly verbatim to his version.
] 
[Add new layout combinator: LayoutBuilderP.
Ilya Portnov <portnov84@rambler.ru>**20110511154010
 Ignore-this: 377b748cb6b84ef7c9f7cde1d4ebd535
 
 LayoutBuilderP is similar to LayoutBuilder (and is based on it), but LayoutBuilderP places windows matching given X.U.WindowProperties.Property (or any other predicate) into one rectangle, instead of fixed number of windows.
] 
[Compile with ghc7
Mats Rauhala <mats.rauhala@gmail.com>**20110504192455
 Ignore-this: 218d2e19835f1e4315c01bd6214899ce
] 
[Action search autocomplete based on whole line
Mats Rauhala <mats.rauhala@gmail.com>**20110504215201
 Ignore-this: 869cf6954be97ea05cbcf7457ab430b7
 
 The previous version autocompleted based on words, but when searching from web
 sites, it makes more sense to autocomplete based on the entire search.
] 
[documentation: tell where to find a few auxiliary functions that might be useful in conjunction with X.A.DynamicWorkspaces
Daniel Wagner <daniel@wagner-home.com>**20110415224846
 Ignore-this: 1bd2232081ba045582d230b632c5bd08
] 
[Typo in window-properties.sh
Brandon S Allbery KF8NH <allbery.b@gmail.com>**20110413053002
 Ignore-this: 4b3d4ef6ba7229f11d93b3cf66055698
 Somewhere between my creating the original version of this script and
 adding it to the tree, a backslash got lost.  It appears to have been
 lost in the version I put on the wiki, so I suspect a copy-paste
 problem at that point.
] 
[XMonad.Util.Run: resolve issue #441
gwern0@gmail.com**20110411163740
 Ignore-this: 9e3da81df65f6750c822a5044952f1a1
 See <http://code.google.com/p/xmonad/issues/detail?id=441>
 
 > I have run into programs that fail when run by safeSpawn but succeed with spawn.
 > I tracked it down in one (python) and it seems to be due to uninstallSignalHandlers.
 > When run by safeSpawn, the program reports errors from wait.
 
 dylan did not supply a patch and his version doesn't match the declared type signature;
 since I don't want to break every `safeSpawn` user, I tossed a `>> return ()` in to make
 the type right, although I'm troubled at removing the exception functions.
] 
[XMonad.Hooks.FadeWindows: A generalized window fading hook
Brandon S Allbery KF8NH <allbery.b@gmail.com>**20110226002436
 Ignore-this: f21d1085ecca26602631f46c45bc198b
] 
[Script to simplify getting ManageHook information from a window
Brandon S Allbery KF8NH <allbery.b@gmail.com>**20110224024937
 Ignore-this: ef0e0089dca94c7c2321f791d5d7ffe
] 
[XMonad/Hooks/DebugKeyEvents - debug helper to see what keys xmonad sees
Brandon S Allbery KF8NH <allbery.b@gmail.com>**20110224023613
 Ignore-this: 5a6a99b7fcc31236152a82aa9c2cda16
] 
[Prevent non-default XUtils windows from being composited
Brandon S Allbery KF8NH <allbery.b@gmail.com>**20110224003224
 Ignore-this: 41a67b8504c412e2754085eb0038f416
] 
[XMonad.Hooks.FloatNext: issue #406, make FloatNext use ToggleHook
gwern0@gmail.com**20110412015217
 Ignore-this: d06aecd03be0cbd507d3738dfde6eee7
] 
[issue #406: ben boeckel <mathstuf@gmail.com> +XMonad.Hooks.ToggleHook
gwern0@gmail.com**20110412015127
 Ignore-this: 125891614da94a5ac0e66e39932aa17e
] 
[Fix xinerama workspace swapping with A.CopyWindow.killAllOtherCopies
Adam Vogt <vogt.adam@gmail.com>**20110301033736
 Ignore-this: de5727d1248d94447c4634a05a90d1cc
 
 Spotted by arlinius in #xmonad, and this only shows up for xinerama setups.
 Using an algorithm that scales better with number of workspaces would probably
 be shorter too (visiting them in turn, rather than doing random access), but
 probably not worth the effort.
] 
[AppendFile: additional example of usage
gwern0@gmail.com**20110126201018
 Ignore-this: 2ba40977463ff15140067ef73947785c
] 
[Fix A.Gridselect image links (thanks dobblego)
Adam Vogt <vogt.adam@gmail.com>**20110119230113
 Ignore-this: e2b334e13c5900a72daff866270b13db
] 
[Bump version to 0.10 to help keep the correct contrib/core versions together.
Adam Vogt <vogt.adam@gmail.com>**20110115180553
 Ignore-this: c3f3bf382225ec14477ed9298aea89af
] 
[H.ICCCMFocus had atom_WM_TAKE_FOCUS incorrectly removed
Adam Vogt <vogt.adam@gmail.com>**20110106192052
 Ignore-this: c566320f252d9fe717080e2da37ff262
 
 It is possible that this atom should be defined in the X11 library, but fix the
 build of contrib for now. In any case, this would have to wait for a change and
 release of the X11 binding.
 
 rolling back:
 
 Wed Jan  5 22:38:39 EST 2011  Adam Vogt <vogt.adam@gmail.com>
   * Remove accidental atom_WM_TAKE_FOCUS from H.ICCCMFocus
   
   The XMonad module exports this already
 
     M ./XMonad/Hooks/ICCCMFocus.hs -7 +1
] 
[Remove accidental atom_WM_TAKE_FOCUS from H.ICCCMFocus
Adam Vogt <vogt.adam@gmail.com>**20110106033839
 Ignore-this: 318d60c8cf4ae4f22a7500948a40ebaf
 
 The XMonad module exports this already
] 
[Java swing application focus patch
haskell@tmorris.net**20110105032535
 Ignore-this: 301805eb559489d34d984dc13c0fa5d0
] 
[fix X.L.Gaps documentation, thanks to Carl Mueller for the report
Brent Yorgey <byorgey@cis.upenn.edu>**20101223010744
 Ignore-this: d60b64676668d5b82efb9215ac5605f6
] 
[Fix A.OnScreen example code typo
Adam Vogt <vogt.adam@gmail.com>**20101212161850
 Ignore-this: 486bfc9edc38913c8863e2d5581359eb
] 
[fix up funny unicode whitespace in Fullscreen
Brent Yorgey <byorgey@cis.upenn.edu>**20101212142241
 Ignore-this: 406c4eec83838923edfbf0dfc554cbb7
] 
[Add X.L.Fullscreen
Audun Skaugen <audunskaugen@gmail.com**20101116221611
 Ignore-this: 4b460e9a25abbb4f988801052232147a
] 
[Close the display correctly after counting the number of screens
quesel@informatik.uni-oldenburg.de**20101116081449
 Ignore-this: 6fbc269e34770935fed7d4fd9494154b
 
 This patch adds support for calling countScreens in arbitrary places. Prior to
 this patch one would end up with an open display for each call of the
 countScreens function with would eventually mess up X. This patch ensures that
 the display that is no longer needed is closed after the operation and thus
 using the function without side effects.
] 
[Compatibility with mtl-1 and mtl-2
Adam Vogt <vogt.adam@gmail.com>**20101115232654
 Ignore-this: 4fb7f279365992fe9e73388b0f4001ac
] 
[Rename state in A.Gridselect to avoid name shadowing (mtl-2)
Adam Vogt <vogt.adam@gmail.com>**20101115232222
 Ignore-this: cd81e11ae9f5372ddd71f0c2b60675d5
] 
[Substring search support for X.A.GridSelect. As keymaps get more complicated to support different styles, the gs_navigate element is fundamentially changed.
Clemens Fruhwirth <clemens@endorphin.org>**20101102211213
 Ignore-this: 95610ac8eb781cd74f6c3ce9e36ec039
] 
[Make substring search case insensitive
Clemens Fruhwirth <clemens@endorphin.org>**20101016212904
 Ignore-this: dce1ae9e4164c24447ae9c79c4557f11
] 
[Introduce grayoutAllElements in X.A.GridSelect
Clemens Fruhwirth <clemens@endorphin.org>**20101016212559
 Ignore-this: 78ca0416b12a49965db876c77e02387f
] 
[Add substring filter to td_elementmap
Clemens Fruhwirth <clemens@endorphin.org>**20101016183644
 Ignore-this: d28b7173095c504ae0e9209303e4468a
] 
[Refactor for ad-hoc element and position matching turning td_elementmap into a function using the new td_availSlot and td_elements fields
Clemens Fruhwirth <clemens@endorphin.org>**20101016183554
 Ignore-this: 85e644a27395e97315efd1ed7a926da8
] 
[Remove nub from diamondLayer in X.A.GridSelect
Clemens Fruhwirth <clemens@endorphin.org>**20101016183132
 Ignore-this: fe290f3712fa1e122e0123d3f87f418b
] 
[Convert access of td_elementmap from field styled to function call styled in X.A.GridSelect
Clemens Fruhwirth <clemens@endorphin.org>**20101016164757
 Ignore-this: b46942bf7ca0bd451b0b402ea8b01bf7
] 
[Make use of field names when constructing TwoDState in X.A.GridSelect
Clemens Fruhwirth <clemens@endorphin.org>**20101016164151
 Ignore-this: 17d947c11e6cb4c64e04fd4754568337
] 
[Pointfree and -XRank2Types don't mix in X.L.Groups.Helpers
Adam Vogt <vogt.adam@gmail.com>**20101113022839
 Ignore-this: 21aa9b687179c5622dc6fae749c7872
 
 It used to work with ghc-6.12 (and earlier?), but ghc-7RC2 type inference
 doesn't work with . instead of it's definition.
] 
[Restrict dependencies, since mtl-2 is incompatible
Adam Vogt <vogt.adam@gmail.com>**20101113022204
 Ignore-this: d6565f9033cc40fd177a20d1688f3ed7
 
 A couple removed constructors need to be replaced by the lowercase versions
 (ex. State = StateT Identity now). But it isn't clear that mtl-1 should be
 dropped.
] 
[X.L.TrackFloating docs and help nested layouts
Adam Vogt <vogt.adam@gmail.com>**20101030175615
 Ignore-this: a4362384ff8baab896715226772edf62
 
 Now TrackFloating remembers focus for the given layout when the other window is
 also tiled, but not fed to the given layout: this helps with X.L.IM, among
 others.
] 
[X.L.Maximize: Make layout forget maximized window when it is closed
Norbert Zeh <nzeh@cs.dal.ca>**20101029221551
 Ignore-this: 9e8bfacce7f90634532078584c82940a
 
 The X.L.Maximize layout modifier does not track whether the window it stores as
 maximized does still exist.  The X server reuses window IDs.  As a result, I
 was able to reproduce the following behaviour (e.g., by opening and closing
 xpdf windows): Create a window, maximize it, close it without restoring it to
 its normal state.  Open a new window with the same window ID (e.g., an xpdf
 window after just closing an xpdf window).  The new window will open maximized,
 which is not what one would expect.  This patch addresses this problem,
 removing the ID of the maximized window from the layout when the maximized
 window is closed.
] 
[Fix bug in L.TrackFloating
Adam Vogt <vogt.adam@gmail.com>**20101030000620
 Ignore-this: 2c3902ea9f1d70a7043965c8aa99891d
 
 Addresses the comment that:
 
 If the focus goes from the floating layer to tiling by deleting a floating
 window, it's again the master window that gets focus, not the remembered
 window.
] 
[Add X.L.Groups.Helpers to other-modules
Daniel Schoepe <daniel.schoepe@googlemail.com>**20101024191850
 Ignore-this: eb000855e28c39140762f09ce02dd35
 
 Not listing aforementioned module can cause build failures in libaries
 that depend on xmonad-contrib.
] 
[windowbringer-menu-choice
mathstuf@gmail.com**20100905013522
 Ignore-this: 3f57b88d725b04f07ce6a43b8d0f56ff
 
 Add functions to allow users to use a menu other than dmenu and pass arguments
 to the menu.
] 
[Add X.L.TrackFloating for tiled-floating focus issues (#4)
Adam Vogt <vogt.adam@gmail.com>**20101016165536
 Ignore-this: 19a4a81601c23900d78d85bd0627d5bb
] 
[minor documentation fixes
Daniel Wagner <daniel@wagner-home.com>**20101007011957
 Ignore-this: c5c046933f318f5a14f063ca387601b9
] 
[Minor documentation fixes in X.U.ExtensibleState
Daniel Schoepe <daniel.schoepe@googlemail.com>**20101004120509
 Ignore-this: 36a36d6e38f812744f8ec3df9bb56ffe
] 
[Clarify the note on -XRank2Types in L.Groups
Adam Vogt <vogt.adam@gmail.com>**20101002020841
 Ignore-this: 4ffe5d2d0be1e8b8a8c151b134e963f2
] 
[Mention X.L.Groups.ModifySpec's rank-2 type in the doc
quentin.moser@unifr.ch**20100117115601
 Ignore-this: 2061238abf835cb20579a4899655cec2
] 
[Orphan my modules
moserq@gmail.com**20101001104300
 Ignore-this: 781ebf36f25a94df96fde5f7bb7bc53e
] 
[Split X.L.Groups.Examples
moserq@gmail.com**20101001104142
 Ignore-this: 4d3bc3c44b1c0233d59c6ce5eefcc587
 
 X.L.G.Examples : rowOfColumns and tiled tabs layouts
 X.L.G.Helpers : helper actions
 X.L.G.Wmii : wmii layout
] 
[X.L.G.Examples: improve the tabs of tiledTabs
moserq@gmail.com**20100120103240
 Ignore-this: 58a449c35e1d4a30ecfdf80f015d2dee
] 
[X.L.G.Examples: improve the tabs of wmiiLike
moserq@gmail.com**20100120101746
 Ignore-this: 1519338158025fb580cac523e4a41b88
] 
[X.L.Groups: Always keep one group, even if empty.
quentin.moser@unifr.ch**20100118021526
 Ignore-this: 22d7f9b92484c3411ecba66b06f69821
] 
[Do not duplicate layouts in X.L.Groups
quentin.moser@unifr.ch**20100117114708
 Ignore-this: 100f8ccfbbcda9e8f5cc2b1470772928
 
 I liked the idea, but it completey messes up Decoration layouts.
] 
[Add missing module re-export (issue 366)
Adam Vogt <vogt.adam@gmail.com>**20100930002046
 Ignore-this: ecd6e4ff54d41f37a75be72f3d0e4a59
] 
[X.H.ManageDocks: event hook to refresh on new docks
Tomas Janousek <tomi@nomi.cz>**20100706185834
 Ignore-this: 96f931aa19c45acd28bdc2319c6a0cb6
] 
[This patch adds support for multiple master windows to X.L.Master
quesel@informatik.uni-oldenburg.de**20100518060557
 Ignore-this: 5c62202575966ee65e9b41ef41c30f94
] 
[X.L.LayoutHints: event hook to refresh on hints change
Tomas Janousek <tomi@nomi.cz>**20100706185925
 Ignore-this: 54eba739c76db176cbb4ef66e30c201f
] 
[Remove last excess definition of `fi' (fromIntegral)
Adam Vogt <vogt.adam@gmail.com>**20100913233850
 Ignore-this: 42d9282697573b361d763d980b816465
] 
[Explain fields added for "XMonad.Layout.ImageButtonDecoration"
Adam Vogt <vogt.adam@gmail.com>**20100913232720
 Ignore-this: 8eae99afb2857a91aabbf3b7f27c784e
] 
[Adjust X.C.Desktop documentation content.
Adam Vogt <vogt.adam@gmail.com>**20100803141117
 Ignore-this: 9c2616514be4dbb722958bc5a11357b1
 
 Correct errors regarding a description of `mappend' for X
 
 Use <+> more often since that's `consistent', and there is no difference since
 it's the same as >> when all arguments have the same type (which they do...
 otherwise people aren't just combining valid values for that field of the
 config).
] 
[Minimize: Replaced calls to 'sendMessage' (BW.focusDown) and 'windows' with alternative methods
Jan Vornberger <jan.vornberger@informatik.uni-oldenburg.de>**20100727224841
 Ignore-this: 67257480b7b93181967a806fedf6fbc5
 Calling these functions during message handling results in the loss of layout state.
 This fixes a number of bugs related to the combination of X.L.Minimize with a decoration.
] 
[CurrentWorkspaceOnTop: proper reimplementation of XMonad.Operation
Jan Vornberger <jan.vornberger@informatik.uni-oldenburg.de>**20100727194154
 Ignore-this: 101f55913bf836d1d87863b4c05d0665
 Fixes bugs in combination with stateful layouts and floating windows
] 
[A hook to handle minimize/restore window manager hints.
Justin Bogner <mail@justinbogner.com>**20100616051124
 Ignore-this: c562ce1df81bce9a7dc5e7fe2dc67a43
 
 XMonad.Hooks.Minimize handles both minimize and restore
 messages. Handling restore messages was already done in
 RestoreMinimized, which this module intends to replace.
] 
[WindowGo: bulk up 'runOrRaise' doc to point to 'raiseMaybe' for shell scripting
gwern0@gmail.com**20100712045632
 Ignore-this: f8f2b04fe7c49827b935ada1345d2ce8
] 
[WindowGo: fmt & sp
gwern0@gmail.com**20100712042915
 Ignore-this: dc733961f0308815fa2ec0afe118f9cb
] 
[Note that Simplest works well with BoringWindows
Adam Vogt <vogt.adam@gmail.com>**20100622030850
 Ignore-this: b9b6060842651c0df47b23dddb3bf54a
] 
[XMonad.Util.Run: improve linking and rearrange docs
gwern0@gmail.com**20100620175215
 Ignore-this: d7b76532309237ddfa22c31a1f1ef5a4
] 
[XMonad.Util.Run: correct broken example
gwern0@gmail.com**20100620175158
 Ignore-this: b390fa0e36b0bd629e7016797e316760
] 
[XMonad.Util.Run: fix unicode char
gwern0@gmail.com**20100620175140
 Ignore-this: 3e524f9d8a96cb47c2c8c7c265d8e649
] 
[XSelection.hs: update docs w/r/t unicode
gwern0@gmail.com**20100615000902
 Ignore-this: 26042b8d27bed602c1844181036a9bb
 see http://code.google.com/p/xmonad/issues/detail?id=348
] 
[encode string of bytes not list of chars
Khudyakov Alexey <alexey.skladnoy@gmail.com>**20100613113341
 Ignore-this: bd03772f1e1ab303646f36c28944b43
] 
[GroupNavigation.hs: clean up imports
gwern0@gmail.com**20100608203832
 Ignore-this: 166ad0b78d8be8453339c7dd5e5cc266
] 
[remove decodeInput/encodeOutput
gwern0@gmail.com**20100614232300
 Ignore-this: 2ed6a014130dba95c6b0a6fcac055110
 see http://code.google.com/p/xmonad/issues/detail?id=348
 they are just synonyms for 2 utf8-string functions, and don't really help
] 
[Developing: be good to mention hlint in a hacking guide
gwern0@gmail.com**20100506160535
 Ignore-this: d86ab58539dd6c09a43789b9a549aa9d
] 
[Fix bug in history maintenance of X.A.GroupNavigation
Norbert Zeh <nzeh@cs.dal.ca>**20100604081431
 Ignore-this: 84a22797ec1b76a9b9805af3272911b0
 
 When the focused window was closed without a new window receiving focus, the
 closed window was not removed from the history database, making for example
 "nextMatch History (return True)" misbehave.  This patch fixes this.
] 
[PositionStoreHook: take decoration into account
Jan Vornberger <jan.vornberger@informatik.uni-oldenburg.de>**20100602223015
 Ignore-this: 72192c7cabeaeb744711b651ac3ffc65
] 
[PositionStoreHook: take docks into account
Jan Vornberger <jan.vornberger@informatik.uni-oldenburg.de>**20100602215048
 Ignore-this: 6ffa63f22e9b511a9d28bc1c04195a08
] 
[TopicSpace: +reverseLastFocusedTopics
Nicolas Pouillard <nicolas.pouillard@gmail.com>**20100520072844
 Ignore-this: 97c860fb139269cd592beab275f78d57
] 
[TopicSpace: improve the lastFocusedTopic handling
Nicolas Pouillard <nicolas.pouillard@gmail.com>**20091220212813
 Ignore-this: 9ad30b815e8a9cf002c8b17c07f05dc2
 
 Now the list of last topics is internally kept but
 only visually truncated.
] 
[X.A.GroupNavigation with containers < 0.3.0.0 compatibility
Norbert Zeh <nzeh@cs.dal.ca>**20100514222153
 Ignore-this: e0cf2a784ff02829ad10962863fd50ed
 
 This patch replaces the use of Seq.filter and Seq.breakl with two
 functions flt and brkl that do the same.  This is necessary to
 keep compatibility with containers < 0.3.0.0 because Seq.filter and
 Seq.breakl were introduced only in containers 0.3.0.0.
] 
[New module XMonad.Actions.GroupNavigation
Norbert Zeh <nzeh@cs.dal.ca>**20100510081412
 Ignore-this: c286dbd1b365326fa25a9c5c0e564af7
 
 This module adds two related facilities.  The first one allows cycling through
 the windows in a window group.  A group is defined as the set of windows for
 which a given Boolean Query returns True.  The second one keeps track of the
 history of focused windows and allows returning to the most recently focused
 window in a given window group before the currently focused window.
] 
[Add a way to update the modifier in X.L.LayoutModifier
Daniel Schoepe <daniel.schoepe@gmail.com>**20090822213958
 Ignore-this: f257a376bef57689287b68ed21ec903d
 
 This patch adds the possibility to update the state of a layout modifier when
 modifying the underlying layout before it is run(i.e. using modifyLayout). 
 The modified state is also passed to the subsequent call of redoLayout, whose 
 return takes precedence if both functions return modified states of the layout 
 modifier.
] 
[Remove trailing whitespace in A.KeyRemap
Adam Vogt <vogt.adam@gmail.com>**20100503153258
 Ignore-this: 59d38be8462d50c298f590d55ebda910
] 
[Adding XMonad.Actions.KeyRemap for mapping single keys
stettberger@dokucode.de**20100502152322
 Ignore-this: 113f6ef92fd31134fb6752a8b8253c3a
 
 With KeyRemap it is possible to emit different keys to client windows, when 
 pressing some key. For example having dvorak layout for typing, but us for 
 keybindings.
] 
[Move Util.Font to .hs, and enable -XCPP
Adam Vogt <vogt.adam@gmail.com>**20100429140744
 Ignore-this: 1e60993426bf8e146c9440e2dbb0f764
 
 As the CPP pass was the only feature being used in Font.hsc (no other FFI)
 it's better to avoid hsc2hs, if only to make the purpose of the module
 clearer from the filename.
] 
[A.Search: Remove unnecessary `do'
Adam Vogt <vogt.adam@gmail.com>**20100429134749
 Ignore-this: 2fc31d045a57ccd01f3af03cb46440c2
] 
[Fix escaping of URI
Khudyakov Alexey <alexey.skladnoy@gmail.com>**20100423204707
 Ignore-this: 7dad15752eb106d8bc6cd50ffd2e8d3a
] 
[Prompt: handle case of historySize=0 better.
Adam Vogt <vogt.adam@gmail.com>**20100421183006
 Ignore-this: e4a74e905677649ddde36385a9ed47a2
] 
[Rearrange tests. See test/genMain.hs for instructions.
Adam Vogt <vogt.adam@gmail.com>**20100419014946
 Ignore-this: 1745e6f1052e84e40153b5b1c0a6e15a
] 
[Use CPP to add to exports for Selective tests (L.LimitWindows)
Adam Vogt <vogt.adam@gmail.com>**20100419014344
 Ignore-this: 74c228892f07bb827e4b419f4efdb04
] 
[Use imported `fi' alias for fromIntegral more often.
Adam Vogt <vogt.adam@gmail.com>**20100416212939
 Ignore-this: 51040e693066fd7803cc1b108c1a13d5
 
 Also moves `fi' into U.Image to avoid cyclic imports,
 though XUtils sill exports that definition.
] 
[Note that mouseResizableTileMirrored may be removed.
Adam Vogt <vogt.adam@gmail.com>**20100416161118
 Ignore-this: 2b005aa36abe224f97062f80e8558af7
] 
[Structure L.MouseResizableTile documentation.
Adam Vogt <vogt.adam@gmail.com>**20100416160641
 Ignore-this: c285ac8a4663bdd2ae957b3c198094da
] 
[X.L.MouseResizableTile: make everything configurable
Tomas Janousek <tomi@nomi.cz>**20100415214609
 Ignore-this: f8164dc63242c7e32210c9577a254bf7
] 
[X.L.MouseResizableTile: configurable gaps (dragger size and position)
Tomas Janousek <tomi@nomi.cz>**20100415213813
 Ignore-this: 5803861bbfecbc8c946b817b98909647
 
 (with the option of putting the draggers over window borders with no gaps at
 all)
] 
[Remove unnecessary imports.
Adam Vogt <vogt.adam@gmail.com>**20100416160239
 Ignore-this: 11beb14b87e294dafb54cc3764393c5b
] 
[update module imports
gwern0@gmail.com**20100414211947
 Ignore-this: 804bee14960064b4e4efd33d07a60a2b
] 
[tests/test_XPrompt can build now.
Adam Vogt <vogt.adam@gmail.com>**20100414204612
 Ignore-this: ded6711134658fe371f19a909037c9cb
] 
[prettier haddock markup for L.NoBorders
Adam Vogt <vogt.adam@gmail.com>**20100405184020
 Ignore-this: 1a9862e6e7ec0e965201a65a68314680
] 
[ImageButtonDecoration: new image for menu button
Jan Vornberger <jan.vornberger@informatik.uni-oldenburg.de>**20100402174910
 Ignore-this: 3977c4bfcb4052e07321ec9e83f917c6
] 
[image_buttons
trupill@gmail.com**20100331093808
 Ignore-this: 418dbf488435c7c803695407557eecfb
 
 * Added a XMonad.Util.Image module to manipulate simple images
   and show them into an X drawable
 * Added the possibility of using image buttons instead of plain
   text buttons into the title bar
 * Added a XMonad.Layout.ImageButtonDecoration as an example of
   how to use the image buttons
 
] 
[WindowMenu: own colorizer that works better with Bluetile's new theme
Jan Vornberger <jan.vornberger@informatik.uni-oldenburg.de>**20100402184119
 Ignore-this: 708e1ad1654165fc5da5efc943a2a6b9
] 
[X.L.Named deprecate and implement using X.L.Renamed
Anders Engstrom <ankaan@gmail.com>**20100401212403
 Ignore-this: a74963ef4990c9e845b9142b8648cf26
 nameTail behaves slightly different if there are whitespace before the first word or the name contains tabs or other such whitespace. But I expect few users are affected since the only usecase where nameTail is actually needed is to remove automatically added prefixes. These prefixes will be removed as they should by the new implementation.
] 
[X.L.Minimize remove redundant imports
Anders Engstrom <ankaan@gmail.com>**20100401204400
 Ignore-this: f7bbfe96c8d08955fc845318f918ec86
] 
[Correct module header.
Adam Vogt <vogt.adam@gmail.com>**20100330181029
 Ignore-this: 53edd88f94f0b7d54fc350c47c38898c
] 
[minimize_ewmh
trupill@gmail.com**20100330183616
 Ignore-this: 4d14b74192af503c4b2e28ea877c85f5
] 
[Use more monoid instances to clean up U.WorkspaceCompare
Adam Vogt <vogt.adam@gmail.com>**20100222151710
 Ignore-this: ab7089175a7486144e01b706de04036e
] 
[Note that Groups has redundancies and the interface may change.
Adam Vogt <vogt.adam@gmail.com>**20100330175945
 Ignore-this: 2f4dc5a2355ace4005dd07fc5d459f1a
 
 Refer to:
 http://www.haskell.org/pipermail/xmonad/2010-January/009585.html
] 
[X.H.UrgencyHook: performance fix
Tomas Janousek <tomi@nomi.cz>**20100330141341
 Ignore-this: b626166259858f16bc5051c67b498c68
 
 cleanupUrgents would update the Map in extensible state 2-times the number of
 visible windows, resulting in excessive memory usage and garbage collection.
 This seems to make it behave correctly.
] 
[Update my e-mail address
quentin.moser@unifr.ch**20100117011109
 Ignore-this: f5efc4d494cb001d3cfbe2b2e169cbe5
] 
[New module: X.L.Groups.Examples
quentin.moser@unifr.ch**20100117010236
 Ignore-this: 8fc40821759d7ed439ecc6726417f52d
 
 Utility functions and examples using X.L.Groups.
] 
[New module: X.L.Groups
quentin.moser@unifr.ch**20100117005301
 Ignore-this: 167e191d520a36b94cf24121ead67dae
 
 The mother of all layout combinators.
] 
[New module: X.L.ZoomRow
quentin.moser@unifr.ch**20100117003939
 Ignore-this: c464ae1005679484e364eb6ece31d9fc
 
 Row layout with individually resizable elements.
] 
[New module: X.L.Renamed
quentin.moser@unifr.ch**20100117002612
 Ignore-this: 38a5c638e36090c746356390c09d3479
] 
[New module: X.U.Stack
quentin.moser@unifr.ch**20100117002104
 Ignore-this: e0c3969042ca5e1e8b9e50436519e52a
 
 Utility functions for working with Maybe Stacks, including:
   - useful conversions to and from lists
   - insertUp/Down, swapUp/Down, focusUp/Down, etc
   - maps, filters and folds
] 
[bugfix: removeKeys should remove all keys in the provided list
Daniel Wagner <daniel@wagner-home.com>**20100327192541
 Ignore-this: 711c776a19d428a2ab4614ee82641de4
] 
[fixed argument order to isPrefixOf in a couple of places in X.A.Search
Jurgen Doser <jurgen.doser@gmail.com>**20100316122010
 Ignore-this: 1a613748778d07de1b459a4268ff8d55
 In some places, ((!>), prefixAware, and one place in the documentation),
 isPrefixOf was used with wrong argument order.  In particular, this made
 combining search engines not work as advertised, for example, the predefined
 search engine "multi".
] 
[X.P.Ssh: add entries from .ssh/config to ssh prompt completion
Brent Yorgey <byorgey@cis.upenn.edu>**20091229171346
 Ignore-this: fa638a0af4cb71be91f6c90bdf6d5513
] 
[X.H.DynamicLog: let the user of xmonadPropLog choose property name
Tomas Janousek <tomi@nomi.cz>**20100319214631
 Ignore-this: 17c0cac2a469e0b70b0cea86f3aeed51
] 
[Replace.hs: rm trailing whitespace
gwern0@gmail.com**20100314210109
 Ignore-this: ee951e62c1de753907f77a8a6bac7cae
] 
[Workspace.hs: rm trailing whitespace
gwern0@gmail.com**20100314210101
 Ignore-this: c2888dc8aa919ce6da706ba8ea1c523a
] 
[Layout.hs: rm trailing whitespace
gwern0@gmail.com**20100314210054
 Ignore-this: 5ad02e9c968bb49773e2bf05310a3754
] 
[Directory.hs: rm trailing whitespace
gwern0@gmail.com**20100314210047
 Ignore-this: 1e83cd71f6439603b577874317cac8bb
] 
[MessageControl: rm trailing whitespace
gwern0@gmail.com**20100314210038
 Ignore-this: d4dc93a8a68847123918db416080e018
] 
[LimitWindows.hs: rm trailing whitespace
gwern0@gmail.com**20100314210030
 Ignore-this: 7d138a5903d45ffeeb4e89f1b8923382
] 
[LayoutCombinators.hs: rm trailing whitespace
gwern0@gmail.com**20100314210021
 Ignore-this: e387bdea6c346fc8a892b06294995442
] 
[DecorationAddons.hs: rm trailing whitespace
gwern0@gmail.com**20100314210012
 Ignore-this: 2f54649e43ebf11e35bd8764d1a44675
] 
[Column.hs: rm whitespace
gwern0@gmail.com**20100314210001
 Ignore-this: 6cfd701babde42d5dc61bfbe95305b20
] 
[DynamicWorkspaces.hs: rm whitespace
gwern0@gmail.com**20100314205951
 Ignore-this: 9d64301708cb1702b9b46f1068efa891
] 
[Fix bugs with nested drawers in X.L.Drawer
Max Rabkin <max.rabkin@gmail.com>**20100310170159
 Ignore-this: 5c7665f3f3ea2c629deb0cca3715bb8d
 There were two bugs:
 1. The layout modifier assumed the rect's x was zero.
 2. The layout modifier assumed that the stackset's focus actually had focus.
] 
[Correct L.Drawer haddock markup and re-export required module.
Adam Vogt <vogt.adam@gmail.com>**20100308225258
 Ignore-this: 1cc5675a68a66cf436817137a478b747
] 
[Added X.L.Drawer
Max Rabkin <max.rabkin@gmail.com>**20100308212752
 Ignore-this: c7973679b7b2702178ae06fc45396dda
 X.L.Drawer provides a layout modifier for retracting windows which roll down
 (like the Quake console) when they gain focus.
] 
[X.U.WorkspaceCompare xinerama compare with physical order
Anders Engstrom <ankaan@gmail.com>**20100308115402
 Ignore-this: 49296fb6e09717f38db28beb66bc2c80
 Like the old xinerama workspace comparison, but order by physical location just like X.A.PhysicalScreens. Useful if using xinerama sort for statusbar together with physicalscreens.
] 
[X.U.Dmenu helpers to run dmenu with arguments
Anders Engstrom <ankaan@gmail.com>**20100308115022
 Ignore-this: 7d582e06d0e393c717f43e0729306fbf
] 
[X.L.LayoutScreens split current screen
Anders Engstrom <ankaan@gmail.com>**20100308114318
 Ignore-this: e7bd1ef63aee3f736e12e109cabb839
 This patch will allow the user to split the currently focused screen instead of all screens together. This is usefull for multiscreen users who have functioning xinerama, but wish to split one of the screens.
] 
[X.A.PhysicalScreens cleaning and allow cycling
Anders Engstrom <ankaan@gmail.com>**20100308113704
 Ignore-this: 3a9a3554cda29f976df646b38b56e8e7
 Remove redundant import to supress warning, did some refactoring to use xmonad internal things to find screens instead of using X11-stuff. Also added ability to cycle between screens in physical order.
] 
[Use imported 'fi' in H.ScreenCorners
Adam Vogt <vogt.adam@gmail.com>**20100222150633
 Ignore-this: 45ceb91d6c39f29bb937aa29c0bc2e66
] 
[X.H.ScreenCorners typos
Nils Schweinsberg <mail@n-sch.de>**20100222115142
 Ignore-this: 805ba06f6215bb83a68631f750743830
] 
[X.H.ScreenCorners rewritten to use InputOnly windows instead of waiting for MotionEvents on the root window
Nils Schweinsberg <mail@n-sch.de>**20100222112459
 Ignore-this: f9866d3e3f1ea09ff9e9bb593146f0b3
] 
[[patch] X.H.ScreenCorners: move the mouse cursor to avoid loops
Nils Schweinsberg <mail@n-sch.de>**20100221231550
 Ignore-this: c8d2ece0f6e75aba1b091d5f9de371dc
] 
[Prevent possible pattern match failure in X.A.UpdateFocus
Daniel Schoepe <daniel.schoepe@gmail.com>**20100221234735
 Ignore-this: fe132d248db01076a1038e9e8acbdf42
] 
[New extension: XMonad.Hooks.ScreenCorners
Nils Schweinsberg <mail@n-sch.de>**20100221230259
 Ignore-this: c3a715e2590ed094ed5908bd225b185e
] 
[documentation for marshallPP
daniel@wagner-home.com**20100215000731
 Ignore-this: efa38829b40dc1586f5f18c4bab21f7d
] 
[DynamicLog support for IndependentScreens
Daniel Wagner <daniel@wagner-home.com>**20100104054251
 Ignore-this: 16fe32f1d66abf4a79f8670131663a60
] 
[minor style changes
Daniel Wagner <daniel@wagner-home.com>**20091228173016
 Ignore-this: 605de753d6a5007751de9d7b9f8ab9ca
] 
[XMonad.Prompt: remove white border from greenXPConfig
gwern0@gmail.com**20100211163641
 Ignore-this: 1cd9a6de02419b7747eab98eb4e84c35
] 
[Fixed reversed history searching direction in X.P.history(Up|Down)Matching
Daniel Schoepe <daniel.schoepe@gmail.com>**20100208162901
 Ignore-this: 61b9907318d18ef2fb5bc633048d3afc
] 
[Compatibility for rename of XMonad.numlockMask
Adam Vogt <vogt.adam@gmail.com>**20100124201955
 Ignore-this: 765c58a8b77ca0b54f05fd69a9bba714
] 
[Use extensible-exceptions to allow base-3 or base-4
Adam Vogt <vogt.adam@gmail.com>**20100124203324
 Ignore-this: 136f35fcc0f3a824b96eea0f4e04f276
] 
[suppress some warnings under ghc 6.12.1 and clean up redundant imports to get rid of some others.
Brent Yorgey <byorgey@cis.upenn.edu>**20100112172507
 Ignore-this: bf3487b27036b02797d9f528a078d006
] 
[Corrected documentation in X.Prompt
Daniel Schoepe <daniel.schoepe@gmail.com>**20100201204522
 Ignore-this: 98f9889a4844bc765cbb9e43bd83bc05
] 
[Use Stack instead of list in X.Prompt.history*Matching
Daniel Schoepe <daniel.schoepe@gmail.com>**20100201202839
 Ignore-this: 45d03c7096949bd250dd1c5c2d3646d4
] 
[BluetileConfig: Fullscreen tweaks and border color change
Jan Vornberger <jan.vornberger@informatik.uni-oldenburg.de>**20100131233347
 Ignore-this: 2a10959bed0f3fb9985e3dd1010f123b
] 
[A.CycleWindows replace partial rotUp and rotDown with safer versions
Wirt Wolff <wirtwolff@gmail.com>**20100123231912
 Ignore-this: 6b4e40c15b66fc53096910e85e736c23
 Rather than throw exceptions, handle null and singleton lists, i.e.
 f [] gives [] and f [x] gives [x].
] 
[Use <+> instead of explicit M.union to merge keybindings in X.C.*
Adam Vogt <vogt.adam@gmail.com>**20100124202136
 Ignore-this: e7bfd99eb4d3e6735153d1d5ec00a885
] 
[Fix incorrect import suggestion in L.Tabbed (issue 362)
Adam Vogt <vogt.adam@gmail.com>**20100121182501
 Ignore-this: 5e46f140a7e8c2abf0ac75b3262a7da4
] 
[Swap window ordering in L.Accordion (closes Issue 358). Thanks rsaarelm.
Adam Vogt <vogt.adam@gmail.com>**20100121154344
 Ignore-this: cd06b0f4fc85f857307aaae8f6e40af7
 
 This change keeps windows in the same ordering when focus is changed.
] 
[use restart to restart xmonad (no longer bluetile)
Jens Petersen <petersen@haskell.org>**20100116105935
 Ignore-this: e6e27c65e25201fc84bfaf092dad48ac
] 
[X.L.Decoration: avoid flicker by not showing decowins without rectangles
Tomas Janousek <tomi@nomi.cz>**20100116112054
 Ignore-this: 6f38634706c3f35272670b969fc6cc96
 
 These would be hidden by updateDecos immediately after being shown. This
 caused flicker with simpleTabbed and only one window on a workspace.
] 
[Add a way to cycle only through matching history entries in X.Prompt
Daniel Schoepe <daniel.schoepe@gmail.com>**20100113233036
 Ignore-this: d67aedb25f2cc6f329a78d5d3eebdd2b
 
 This patch adds a way go up through X.Prompt's history using
 only those entries that start with the current input, similar
 to zsh's `history-search-backward'.
] 
[Style changes in L.Minimize
Adam Vogt <vogt.adam@gmail.com>**20100104144448
 Ignore-this: 5f64c0717e24ed6cbe2c9fad50bf78a3
] 
[minimize_floating
konstantin.sobolev@gmail.com**20091230070105
 Ignore-this: 2c0e1b94f123a869fb4e72a802e59c2
 Adds floating windows support to X.L.Minimize
] 
[Use more imported cursor constants.
Adam Vogt <vogt.adam@gmail.com>**20091230220927
 Ignore-this: 91e55c63a1d020fafb6b53e6abf9766c
] 
[import new contrib module, X.A.DynamicWorkspaceOrder
Brent Yorgey <byorgey@cis.upenn.edu>**20091230192350
 Ignore-this: bba2c0c30d5554612cc6e8bd59fee205
] 
[X.A.CycleWS: export generalized 'doTo' function for performing an action on a workspace relative to the current one
Brent Yorgey <byorgey@cis.upenn.edu>**20091230191953
 Ignore-this: 7cf8efe7c45b501cbcea0943f667b77e
] 
[new contrib module, X.A.DynamicWorkspaceGroups, for managing groups of workspaces on multi-head setups
Brent Yorgey <byorgey@cis.upenn.edu>**20091229165702
 Ignore-this: fc3e6932a95f57b36b4d8d4cc7f3e2d7
] 
[new contrib module from Tomas Janousek, X.A.WorkspaceNames
Brent Yorgey <byorgey@cis.upenn.edu>**20091229163915
 Ignore-this: 5bc7caaf38647de51949a24498001474
] 
[X.P.Shell, filter empty string from PATH
Tim Horton <tmhorton@gmail.com>**20091224033217
 Ignore-this: 1aec55452f917d0be2bff7fcf5937766
 
 doesDirectoryExist returns True if given an empty string using ghc <= 6.10.4.
 This causes getDirectoryContents to raise an exception and X.P.Shell does not
 render. This is only an issue if you have an empty string in your PATH.
 
 Using ghc == 6.12.1, doesDirectoryExist returns False given an empty string, so
 this should not be an issue in the future.
 
] 
[small tweak to battery logger
Brent Yorgey <byorgey@cis.upenn.edu>**20091227085641
 Ignore-this: 350dfed0cedd250cd9d4bd3391cbe034
] 
[Use imported xC_bottom_right_corner in A.MouseResize
Adam Vogt <vogt.adam@gmail.com>**20091227233705
 Ignore-this: 52794f788255159b91e68f2762c5f6a1
] 
[X.A.MouseResize: assign an appropriate cursor for the resizing inpuwin
Tomas Janousek <tomi@nomi.cz>**20091227212140
 Ignore-this: d9ce96c2cd0312b6b5be4acee30a1da3
] 
[Fix the createSession bug in spawnPipe
Spencer Janssen <spencerjanssen@gmail.com>**20091227003501
 Ignore-this: 2d7f8746eb657036d39f3b9aac22b3c9
 Both the new XMonad.Core.xfork function and spawnPipe call createSession, calling
 this function twice results in an error.
] 
[Let the core know about MouseResizableTile's draggers, so they are stacked correctly
Jan Vornberger <jan.vornberger@informatik.uni-oldenburg.de>**20091223145428
 Ignore-this: 7c096aba6b540ccf9b49c4ee86c6091a
] 
[Update all uses of forkProcess to xfork
Spencer Janssen <spencerjanssen@gmail.com>**20091223064558
 Ignore-this: 963a4ddf1d2f4096bbb8969b173cd0c1
] 
[Make X.L.Minimize explicitly mark minimized windows as boring
Jan Vornberger <jan.vornberger@informatik.uni-oldenburg.de>**20091222214529
 Ignore-this: b1e8adf26ac87dede6c1b7a7d687411c
] 
[Actions/Search: added openstreetmap
intrigeri@boum.org**20091222114545
 Ignore-this: fafc4680c8b59b7a044d995c1dacec9a
] 
[Add a search predicate option to XMonad.Prompt
Mike Lundy <mike@fluffypenguin.org>**20091221025408
 Ignore-this: 8e8804eeb9650d38bc225e15887310da
] 
[In D.Extending note how <+> can be used with keybindings.
Adam Vogt <vogt.adam@gmail.com>**20091220190739
 Ignore-this: ebea8ef8a835ed368fa06621add6519f
] 
[Fix MultiToggle crashes with decorated layouts
Tomas Janousek <tomi@nomi.cz>**20091220004733
 Ignore-this: 9208f5da9f0de95464ea62cb45e8f291
 
 The problem was that certain layouts keep their "world" state in their value,
 which was thrown away and forgotten after ReleaseResources during toggle.
 
 In particular, decorated layouts store some X11 handles in them and
 allocate/deallocate it as appropriate. If any modification to their state is
 ignored, they may try to deallocate already deallocated memory, which results
 in a crash somewhere inside Xlib.
 
 This patch makes Transformers reversible so that nothing is ever ignored. As a
 side effect, layout transformers now do receive messages and messages for the
 base layout do not need the undo/reapply cycle -- we just pass messages to the
 current transformed layout and unapply the transformer when needed.
 (This, however, doesn't mean that the base layout is not asked to release
 resources on a transformer change -- we still need the transformer to release
 its resources and there's no way to do this without asking the base layout as
 well.)
] 
[Golf / style change in U.ExtensibleState
Adam Vogt <vogt.adam@gmail.com>**20091208010506
 Ignore-this: c35bd85baae4700e14417ac7e07de959
] 
[Style changes in EwmhDesktops
Adam Vogt <vogt.adam@gmail.com>**20091219003824
 Ignore-this: 905eff9ed951955c8f62617b2d82302e
] 
[Add support for fullscreen through the _NET_WM_STATE protocol
audunskaugen@gmail.com**20091214135119
 Ignore-this: 430ca3c6779e36383f8ce8e477ee9622
 
 This patch adds support for applications using the
 gtk_window_fullscreen function, and other applications using
 _NET_WM_STATE for the same purpose.
] 
[TAG 0.9.1
Spencer Janssen <spencerjanssen@gmail.com>**20091216233651
 Ignore-this: 713d9dd89d775e30346f57a61038d308
] 
[Bump version to 0.9.1
Spencer Janssen <spencerjanssen@gmail.com>**20091216232634
 Ignore-this: bcd799c3341ee6c69a259e1dca747cac
] 
[Match X11 dependencies with xmonad's
Spencer Janssen <spencerjanssen@gmail.com>**20091216012630
 Ignore-this: bcbd6e3e5e2675cdac6f1d1b1bc09853
] 
[Safer X11 version dependency
Spencer Janssen <spencerjanssen@gmail.com>**20091216005916
 Ignore-this: 6dc805a8a0c7a3d3369bc1d6d97d4f56
] 
[Update Prompt for numlockMask changes
Spencer Janssen <spencerjanssen@gmail.com>**20091103222621
 Ignore-this: 4980e2fdf4c296a266590cc4acf76e1e
] 
[X.L.MouseResizableTile: change description for mirrored variant
Tomas Janousek <tomi@nomi.cz>**20091211124218
 Ignore-this: dbc02fb777e35cdc15fb11979c1e983e
 
 The description for mirrored MouseResizableTile is now "Mirror
 MouseResizableTile", to follow the standard of other layouts that can be
 mirrored using the Mirror modifier.
] 
[X.A.GridSelect: documentation typo fix
Tomas Janousek <tomi@nomi.cz>**20091211182515
 Ignore-this: 521bef2a73a9e969d7a96defb555177b
 
 spotted by Justin on IRC
] 
[A.GridSelect shouldn't grab keys if there are no choices.
Adam Vogt <vogt.adam@gmail.com>**20091210183038
 Ignore-this: 48509f780120014a10b32e7289369f32
 
 Thanks thermal2008 in #xmonad for bringing up the corner case when gridselect
 is run with an empty list of choices.
] 
[onScreen' variation for X () functions
Nils Schweinsberg <mail@n-sch.de>**20091209003717
 Ignore-this: 6a9644c729c2b60f94398260f3640e4d
] 
[Added Bluetile's config
Jan Vornberger <jan.vornberger@informatik.uni-oldenburg.de>**20091209150309
 Ignore-this: 641ae527ca6f615e81822b6f38f827e7
] 
[BluetileCommands - a list of commands that Bluetile uses to communicate with its dock
Jan Vornberger <jan.vornberger@informatik.uni-oldenburg.de>**20091208234431
 Ignore-this: 1a5a5e69c7c37d3ffe8d8e09496568de
] 
[Use lookup instead of find in A.PerWorkspaceKeys
Adam Vogt <vogt.adam@gmail.com>**20091129032650
 Ignore-this: 7ecb043df4317365ff3d25b17303eed8
] 
[Change of X.A.OnScreen, more simple and predictable behaviour of onScreen, new functions: toggle(Greedy)OnScreen
Nils Schweinsberg <mail@n-sch.de>**20091207155050
 Ignore-this: c375250778758e401217bcad83567d3b
] 
[Module to ensure that a dragged window always stays in front of all other windows
Jan Vornberger <jan.vornberger@informatik.uni-oldenburg.de>**20091129004506
 Ignore-this: a8a389198ccc28a66686561d4d17e91b
] 
[Decoration that allows to switch the position of windows by dragging them onto each other.
Jan Vornberger <jan.vornberger@informatik.uni-oldenburg.de>**20091129003431
 Ignore-this: 38aff0f3beb1a1eb304219c4f3e85593
] 
[A decoration with small buttons and a supporting module
Jan Vornberger <jan.vornberger@informatik.uni-oldenburg.de>**20091129002416
 Ignore-this: 2d65133bc5b9ad29bad7d06780bdaa4
] 
[XMonad.Actions.Search: finally fixed the internet archive search plugin
gwern0@gmail.com**20091205033435
 Ignore-this: c78ecebced9bc8e39e6077ffa9f9f182
] 
[XMonad.Actions.Search: in retrospect, a bit silly to make everyone go through SSL
gwern0@gmail.com**20091205033318
 Ignore-this: 452b4e6efb83935fc1063ab695ae074d
] 
[Prompt.hs: Corrected quit keybindings
Tim Horton <tmhorton@gmail.com>**20091203050041
 Ignore-this: e8cd2cd1d41f6807f68157ef37c631ea
] 
[Extended decoration module with more hooks and consolidated some existing ones
Jan Vornberger <jan.vornberger@informatik.uni-oldenburg.de>**20091128234310
 Ignore-this: 5a23af3009ecca2feb9a84f8c6f8ac33
] 
[Extended decoration theme to contain extra static text that always appears in the title bar
Jan Vornberger <jan.vornberger@informatik.uni-oldenburg.de>**20091024213928
 Ignore-this: 95f46d6b9ff716a2d8002a426c1012c8
] 
[Extended paintAndWrite to allow for multiple strings to be written into the rectangle
Jan Vornberger <jan.vornberger@informatik.uni-oldenburg.de>**20091024205111
 Ignore-this: eb7d32284b7f98145038dcaa14f8075e
] 
[Added the alignment option 'AlignRightOffset'
Jan Vornberger <jan.vornberger@informatik.uni-oldenburg.de>**20091024204513
 Ignore-this: 58cc00e1be669877e38a97e36b924969
] 
[Prevent windows from being decorated that are too small to contain decoration.
Jan Vornberger <jan.vornberger@informatik.uni-oldenburg.de>**20090627094316
 Ignore-this: 39b806462bbd424f1206b635e9d506e1
] 
[X.L.MouseResizableTile: keep draggers on the bottom of the window stack.
Tomas Janousek <tomi@nomi.cz>**20091126173413
 Ignore-this: 8089cf8ce53580090b045f4aebb1b899
] 
[Implemented smarter system of managing borders for BorderResize
Jan Vornberger <jan.vornberger@informatik.uni-oldenburg.de>**20091122233651
 Ignore-this: 4775c082249e598a84c79b2e819f28b0
] 
[X.H.DynamicLog: fix xmonadPropLog double-encoding of UTF-8
Tomas Janousek <tomi@nomi.cz>**20091121004829
 Ignore-this: bde612bbd1a19951f9718a03e737c4ac
 
 dynamicLogString utf-8 encodes its output, xmonadPropLog shouldn't do that
 again.
] 
[X.H.DynamicLog: make documentation for 'dzen' and 'xmobar' slightly more clear
Brent Yorgey <byorgey@cis.upenn.edu>**20091121170739
 Ignore-this: c9a241677fda21ef93305fc3882f102e
] 
[X.H.ManageDocks: ignore struts that cover an entire screen on that screen
Tomas Janousek <tomi@nomi.cz>**20091119145043
 Ignore-this: ad7bbf10c49c9f3e938cdc3d8588e202
 
 Imagine a screen layout like this:
 
   11111111
   11111111
   11111111
    222222    <--- xmobar here
    222222
    222222
 
 When placing xmobar as indicated, the partial strut property indicates that an
 entire height of screen 1 is covered by the strut, as well as a few lines at
 the top of screen 2. The original code would create a screen rectangle of
 negative height and wreak havoc. This patch causes such strut to be ignored on
 the screen it covers entirely, resulting in the desired behaviour of a small
 strut at the top of screen 2.
 
 Please note that this semantics of _NET_WM_STRUT and _NET_WM_STRUT_PARTIAL is
 different to what is in wm-spec. The "correct" thing to do would be to discard
 the covered portion of screen 1 leaving two narrow areas at the sides, but
 this new behaviour is probably more desirable in many cases, at least for
 xmonad/xmobar users.
 
 The correct solution of having separate _NET_WM_STRUT_PARTIAL for each
 Xinerama screen was mentioned in wm-spec maillist in 2007, but has never
 really been proposed, discussed and included in wm-spec. Hence this "hack".
] 
[Use imported 'fi' in PositionStoreHooks
Adam Vogt <vogt.adam@gmail.com>**20091119103112
 Ignore-this: 6563a3093083667c79aa491a6f59b805
] 
[Changed interface of X.U.ExtensibleState
Daniel Schoepe <daniel.schoepe@gmail.com>**20091116171013
 Ignore-this: 9a830f9341e461628974890bab0bd65b
 
 Changed the interface of X.U.ExtensibleState to resemble that of
 Control.Monad.State and modified the modules that use it accordingly.
] 
[PositionStoreFloat - a floating layout with support hooks
Jan Vornberger <jan.vornberger@informatik.uni-oldenburg.de>**20091115184833
 Ignore-this: 8b1d0fcef1465356d72cb5f1f32413b6
] 
[PositionStore utility to store information about position and size of a window
Jan Vornberger <jan.vornberger@informatik.uni-oldenburg.de>**20091108195735
 Ignore-this: 2f6e68a490deb75cba5d007b30c93fb2
] 
[X.H.Urgencyhook fix minor doc bug
Anders Engstrom <ankaan@gmail.com>**20091115131121
 Ignore-this: 18b63bccedceb66c77b345a9300f1ac3
] 
[X.H.DynamicLog fix minor indentation oddness
Anders Engstrom <ankaan@gmail.com>**20091115130707
 Ignore-this: 7f2c49eae5527874ca4499767f4167c4
] 
[X.A.CycleWS cycle by tag group
Anders Engstrom <ankaan@gmail.com>**20091115130217
 Ignore-this: 909da8c00b47a31d04f59bd3751c60bc
 Allow grouping of workspaces, so that a user can cycle through those in the same group. Grouping is done by using a special character in the tag.
] 
[Use less short names in X.Prompt
Adam Vogt <vogt.adam@gmail.com>**20091115025647
 Ignore-this: 1d27b8efc4d829a5642717c6f6426336
] 
[Use io instead of liftIO in Prompt
Adam Vogt <vogt.adam@gmail.com>**20091115025301
 Ignore-this: cd4031b74cd5bb874cd2c3cc2cb087f2
] 
['io' and 'fi' are defined outside of Prompt
Adam Vogt <vogt.adam@gmail.com>**20091115024001
 Ignore-this: 3426056362db9cbfde7d2f4edbfe6f36
] 
[Use zipWithM_ instead of recursion in Prompt.printComplList
Adam Vogt <vogt.adam@gmail.com>**20091115023451
 Ignore-this: 2457500ed871ef120653a3d4ada13441
] 
[Minor style changes in DynamicWorkspaces
Adam Vogt <vogt.adam@gmail.com>**20091115022751
 Ignore-this: 1a6018ab134e4420a949354575a8a110
] 
[X.A.DynamicWorkspaces fix doc and add behaviour
Anders Engstrom <ankaan@gmail.com>**20091113233903
 Ignore-this: ab7c20a9c1b43ebc6a7f4700d988fb73
 Before this patch the documentation claims that it won't do anything on non-empty workspaces when it actually does. This patch fixes the documentation to reflect the actual behaviour, but also adds the behaviour promised by the documentation in other functions. It does not break configs. In addition it also provides functions to help removing empty workspaces when leaving them.
] 
[rework XMonad.Util.Dzen
daniel@wagner-home.com**20091114051509
 Ignore-this: 16d93f91c54f7d195b1a418e6c0351c5
] 
[generalize IO actions to MonadIO m => m actions
daniel@wagner-home.com**20091114023616
 Ignore-this: 2c801a27b0ffee34a2f0daca3778613a
 
 This should not cause any working configs to stop working, because IO is an instance of MonadIO, and because complete configs will pin down the type of the call to IO.  Note that XMonad.Config.Arossato is not a complete config, and so it needed some tweaks; with a main function, this should not be a problem.
] 
[fix documentation to match implementation
daniel@wagner-home.com**20091114021328
 Ignore-this: 6dbbb118b139f443c40a573445a48d07
] 
[Bypass more of stringToKeysym in U.Paste
Adam Vogt <vogt.adam@gmail.com>**20091114223726
 Ignore-this: 617c922647e9f49f5ecefa0eb1c65d3c
] 
[Don't erase floating information with H.InsertPosition (Issue 334)
Adam Vogt <vogt.adam@gmail.com>**20091113161402
 Ignore-this: de1c03eb860ea25b390ee5c756b02997
] 
[Rename gridselectViewWorkspace to gridselectWorkspace, add another example.
Adam Vogt <vogt.adam@gmail.com>**20091112211435
 Ignore-this: 462cf1c7f66ab97a1ce642977591a910
 
 The name should be more general to suggest uses other than just viewing other
 workspaces.
] 
[X.A.DynamicWorkspaces: fix addWorkspace and friends so they never add another copy of an existing workspace
Brent Yorgey <byorgey@cis.upenn.edu>**20091112201351
 Ignore-this: 5bfe8129707b038ed04383b7566b2323
] 
[Trim whitespace in H.FloatNext
Adam Vogt <vogt.adam@gmail.com>**20091111022702
 Ignore-this: 1ad52678246fa1ac951169c2356ce10b
] 
[Use ExtensibleState in H.FloatNext
Adam Vogt <vogt.adam@gmail.com>**20091111022513
 Ignore-this: 760d95a685af080466cb4164d1096423
] 
[Make a haddock link direct in C.Desktop.
Adam Vogt <vogt.adam@gmail.com>**20091111013810
 Ignore-this: da724a7974c3de60f49996c1fe92d3fb
] 
[Change A.TopicSpace haddocks to use block quotes.
Adam Vogt <vogt.adam@gmail.com>**20091111013241
 Ignore-this: 6f7f43d2715cfde62b9c05c7d9a0da2
] 
[Add defaultTopicConfig, to allow adding more fields to TopicSpace later.
Adam Vogt <vogt.adam@gmail.com>**20091111012915
 Ignore-this: 6dad95769651a9a1ef8d771f81c91f8e
] 
[X.A.WindowGo: fix haddock markup
Spencer Janssen <spencerjanssen@gmail.com>**20091111003256
 Ignore-this: c6a06de900ca8b67498abf5152e3d9ea
] 
[Minor style corrections in X.U.SpawnOnce
Daniel Schoepe <daniel.schoepe@gmail.com>**20091109201543
 Ignore-this: 1264852c23b4f84b2580bf4567529c68
] 
[Add gridselectViewWorkspace in X.A.GridSelect
Daniel Schoepe <daniel.schoepe@gmail.com>**20091109155815
 Ignore-this: 5543211e9e3fd325cb798b004635a525
] 
[minor-doc-fix-in-ManageHelpers
`Henrique Abreu <hgabreu@gmail.com>'**20091104172727
 Ignore-this: 231ad417541bc3c17a1cb2dff139d55d
] 
[Set buffering to LineBuffering in scripts/xmonadpropread.hs
Daniel Schoepe <daniel.schoepe@gmail.com>**20091108204106
 Ignore-this: 4e593fc1461fbbfb5b147c7c7702584e
 
 (Required for the script to work properly with tools like dzen)
] 
[X.U.ExtensibleState: style
Spencer Janssen <spencerjanssen@gmail.com>**20091108182858
 Ignore-this: f189da75ad2c57ae9cca48eaf69a6bad
] 
[X.A.DynamicWorkspaces: new 'addWorkspacePrompt' method
Brent Yorgey <byorgey@cis.upenn.edu>**20091108170503
 Ignore-this: a3992b1b7938be80d8fd2a5a503a4042
] 
[Remove defaulting when using NoMonomorphismRestriction in H.EwmhDesktops
Adam Vogt <vogt.adam@gmail.com>**20091107195255
 Ignore-this: ca3939842639c94ca4fd1ff6624319c1
] 
[Update A.TopicSpace to use extensible state. No config changes required.
Adam Vogt <vogt.adam@gmail.com>**20091107194502
 Ignore-this: 7a82aad512bb727b3447de0faa4a210f
] 
[Inline tupadd function in A.GridSelect
Adam Vogt <vogt.adam@gmail.com>**20091101190312
 Ignore-this: 458968154303ab865c304f387d6ac83b
] 
[Alphabetize exposed-modules
Spencer Janssen <spencerjanssen@gmail.com>**20091107174946
 Ignore-this: 919684aea7747a756b303f9b34a2870b
] 
[Use X.U.SpawnOnce in my config
Spencer Janssen <spencerjanssen@gmail.com>**20091107174615
 Ignore-this: fe8f5f75136128280942771ec429f09a
] 
[Add XMonad.Util.SpawnOnce
Spencer Janssen <spencerjanssen@gmail.com>**20091107173820
 Ignore-this: 8d4657bbaa8dbeb1d0f9d22293bfef19
] 
[Store deserialized data after reading in X.U.ExtensibleState
Daniel Schoepe <daniel.schoepe@gmail.com>**20091107103832
 Ignore-this: 192beca56e9437292bd3f16451ae9e66
] 
[Fixed conflict between X.U.ExtensibleState and X.C.Sjanssen
Daniel Schoepe <daniel.schoepe@gmail.com>**20091107103619
 Ignore-this: 80f4bb218574d7c528af17473c6e4f66
] 
[Use X.U.ExtensibleState instead of IORefs
Daniel Schoepe <daniel.schoepe@gmail.com>**20091106115601
 Ignore-this: e0e80e31e51dfe76f2b2ed597892cbba
   
 This patch changes SpawnOn, DynamicHooks and UrgencyHooks to
 use X.U.ExtensibleState instead of IORefs. This simplifies the
 usage of those modules thus also breaking current configs.
] 
[Add X.U.ExtensibleState
Daniel Schoepe <daniel.schoepe@gmail.com>**20091106115336
 Ignore-this: d80d9d0c10a53fb71a375e432bd29344
] 
[My config uses xmonadPropLog now
Spencer Janssen <spencerjanssen@gmail.com>**20091107005230
 Ignore-this: 8f16b8bea86dfcd3739f1566f5897578
] 
[Add xmonadpropread script
Spencer Janssen <spencerjanssen@gmail.com>**20091107004858
 Ignore-this: 8cc7ed36ec1126d0139638148f9642e8
] 
[Add experimental xmonadPropLog function
Spencer Janssen <spencerjanssen@gmail.com>**20091107004624
 Ignore-this: f09b2c11b16a3af993b63d1b39566120
] 
[XMonad.Actions.Search: imdb search URL tweak for bug #33
gwern0@gmail.com**20091103222330
 Ignore-this: bae5e6d3ec6c4b6591016ece9dffb202
] 
[Clean imports for L.BoringWindows
Adam Vogt <vogt.adam@gmail.com>**20091103140649
 Ignore-this: 56946a652329390dbdd63746ca23ee8e
] 
[I maintain L.BoringWindows
Adam Vogt <vogt.adam@gmail.com>**20091103140509
 Ignore-this: de853972b4c1c4cefa2dc29e68828d5d
] 
[fix window rectangle calculation in X.A.UpdatePointer
Tomas Janousek <tomi@nomi.cz>**20091026154918
 Ignore-this: ad0c3a020b802854919c7827faa001ad
] 
[Implement hasProperty in terms of runQuery in U.WindowProperties
Adam Vogt <vogt.adam@gmail.com>**20091031154945
 Ignore-this: 1c351bc436e0e323dc25d8f5ff734dcb
 
 This addresses issue 302 for unicode titles by actually using the complicated
 XMonad.ManageHook.title code, instead of reimplementing it with stringProperty
 (which doesn't appear to handle unicode).
] 
[Add functions to access the current input in X.Prompt
Daniel Schoepe <daniel.schoepe@gmail.com>**20091030235033
 Ignore-this: 3f568c1266d85dcaa5722b19bbbd61dd
] 
[Remove putSelection, fixes #317
Spencer Janssen <spencerjanssen@gmail.com>**20091030224354
 Ignore-this: 6cfd6d92e1d133bc9e3cbb7c8339f735
] 
[Fix typo in H.FadeInactive documentation
Adam Vogt <vogt.adam@gmail.com>**20091029165736
 Ignore-this: b2af487cd382416160d5540b7f210464
] 
[X.L.MultiCol constructor 0 NWin bugfig
Anders Engstrom <ankaan@gmail.com>**20091029105633
 Ignore-this: e6a24f581593424461a8675984d14d25
 Fix bug where the constructor did not accept catch-all columns. Also some minor cleaning.
] 
[X.H.ManageHelpers: added currentWs that returns the current workspace
Ismael Carnales <icarnales@gmail.com>**20091028193519
 Ignore-this: dcd3dac6bd741d26747807691f125637
] 
[X.L.MultiColumns bugfix and formating
Anders Engstrom <ankaan@gmail.com>**20091027131741
 Ignore-this: 6978f485d18adb8bf81cf6c8e0d0332
 Fix bug where a column list of insufficient length could be used to find the column of the window. Also fix formating to conform better with standards.
] 
[X.L.MultiColumns NWin shrinkning fix
Anders Engstrom <ankaan@gmail.com>**20091027005932
 Ignore-this: 9ba40ee14ec12c3885173817eac2b564
 Fixed a bug where the list containing the number of windows in each column was allowed the shrink if a column was unused.
] 
[New Layout X.L.MultiColumns
Anders Engstrom <ankaan@gmail.com>**20091024175155
 Ignore-this: a2d3d2eee52c28eab7d125f6b621cada
 New layout inspired the realization that I was switching between Mirror Tall and Mirror ThreeCol depending on how many windows there were on the workspace. This layout will make those changes automatically.
] 
[Changing behaviour of ppUrgent with X.H.DynamicLog
mail@n-sch.de**20090910010411
 Ignore-this: 3882f36d5c49e53628485c1570bf136a
 
 Currently, the ppUrgent method is an addition to the ppHidden method.
 This doesn't make any sense since it is in fact possible to get urgent
 windows on the current and visible screens. So I've raised the ppUrgent
 printer to be above ppCurrent/ppVisible and dropped its dependency on
 ppHidden.
 
 In addition to that this makes it a lot more easier to define a more
 custom ppUrgent printer, since you don't have to "undo" the ppHidden
 printer anymore. This also basicly removes the need for dzenStrip,
 although I just changed the description.
 
 -- McManiaC / Nils
 
] 
[fix X.U.Run.spawnPipe fd leak
Tomas Janousek <tomi@nomi.cz>**20091025210246
 Ignore-this: 24375912d505963fafc917a63d0e79a0
] 
[TAG 0.9
Spencer Janssen <spencerjanssen@gmail.com>**20091026013449
 Ignore-this: 542b6105d6deed65e12d1f91c666b0b2
] 
Patch bundle hash:
50d0a94eb921cc91b6e19bf34357a26e113731da
