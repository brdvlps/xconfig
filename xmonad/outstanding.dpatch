4 patches for repository http://code.haskell.org/xmonad:

Wed Nov  3 19:31:28 EDT 2010  Nathaniel Wesley Filardo <nwf@cs.jhu.edu>
  * Add shutdownHook configuration callback

Tue Nov 15 17:52:45 EST 2011  Nathaniel Wesley Filardo <nwf@cs.jhu.edu>
  * Export the native X11 Event as well as its parsed form to event handlers

Fri Nov 18 14:34:43 EST 2011  Nathaniel Wesley Filardo <nwf@cs.jhu.edu>
  * Make xmonad work when it isn't on $PATH

Fri Nov 18 14:35:10 EST 2011  Nathaniel Wesley Filardo <nwf@cs.jhu.edu>
  * Add a messageHook to the configuration

New patches:

[Add shutdownHook configuration callback
Nathaniel Wesley Filardo <nwf@cs.jhu.edu>**20101103233128
 Ignore-this: 93966ddca3f66f719b41e4504f2ba451
] {
hunk ./XMonad/Config.hs 28
 -- Useful imports
 --
 import XMonad.Core as XMonad hiding
-    (workspaces,manageHook,keys,logHook,startupHook,borderWidth,mouseBindings
+    (workspaces,manageHook,keys,logHook,startupHook,shutdownHook,borderWidth,mouseBindings
     ,layoutHook,modMask,terminal,normalBorderColor,focusedBorderColor,focusFollowsMouse
     ,handleEventHook)
 import qualified XMonad.Core as XMonad
hunk ./XMonad/Config.hs 32
-    (workspaces,manageHook,keys,logHook,startupHook,borderWidth,mouseBindings
+    (workspaces,manageHook,keys,logHook,startupHook,shutdownHook,borderWidth,mouseBindings
     ,layoutHook,modMask,terminal,normalBorderColor,focusedBorderColor,focusFollowsMouse
     ,handleEventHook)
 
hunk ./XMonad/Config.hs 43
 import Data.Bits ((.|.))
 import Data.Monoid
 import qualified Data.Map as M
-import System.Exit
+import System.Exit(ExitCode(ExitSuccess))
 import Graphics.X11.Xlib
 import Graphics.X11.Xlib.Extras
 
hunk ./XMonad/Config.hs 123
 startupHook :: X ()
 startupHook = return ()
 
+-- | Perform an arbitrary action at xmonad shutdown.
+shutdownHook :: X ()
+shutdownHook = return ()
+
 ------------------------------------------------------------------------
 -- Extensible layouts
 --
hunk ./XMonad/Config.hs 208
     --, ((modMask              , xK_b     ), modifyGap (\i n -> let x = (XMonad.defaultGaps conf ++ repeat (0,0,0,0)) !! i in if n == x then (0,0,0,0) else x)) -- %! Toggle the status bar gap
 
     -- quit, or restart
-    , ((modMask .|. shiftMask, xK_q     ), io (exitWith ExitSuccess)) -- %! Quit xmonad
+    , ((modMask .|. shiftMask, xK_q     ), exit $ Just ExitSuccess ) -- %! Quit xmonad
     , ((modMask              , xK_q     ), spawn "if type xmonad; then xmonad --recompile && xmonad --restart; else xmessage xmonad not in \\$PATH: \"$PATH\"; fi") -- %! Restart xmonad
     ]
     ++
hunk ./XMonad/Config.hs 251
     , XMonad.keys               = keys
     , XMonad.logHook            = logHook
     , XMonad.startupHook        = startupHook
+    , XMonad.shutdownHook       = shutdownHook
     , XMonad.mouseBindings      = mouseBindings
     , XMonad.manageHook         = manageHook
     , XMonad.handleEventHook    = handleEventHook
hunk ./XMonad/Core.hs 110
     , borderWidth        :: !Dimension           -- ^ The border width
     , logHook            :: !(X ())              -- ^ The action to perform when the windows set is changed
     , startupHook        :: !(X ())              -- ^ The action to perform on startup
+    , shutdownHook       :: !(X ())              -- ^ The action to perform on shutdown
     , focusFollowsMouse  :: !Bool                -- ^ Whether window entry events can change focus
     }
 
hunk ./XMonad/Operations.hs 37
 import Control.Monad.State
 import qualified Control.Exception.Extensible as C
 
+import System.Exit(ExitCode, exitWith)
 import System.Posix.Process (executeFile)
 import Graphics.X11.Xlib
 import Graphics.X11.Xinerama (getScreenInfo)
hunk ./XMonad/Operations.hs 407
 
 ------------------------------------------------------------------------
 
+-- | Properly shut down XMonad.  Please use this instead of io (exitWith _).
+--
+-- If given an exit status, it will actually exit xmonad; otherwise, it
+-- simply invokes the resource management calls.
+exit :: Maybe ExitCode -> X ()
+exit mec = do
+    shh <- asks (shutdownHook . config)
+    _ <- userCode $ shh
+    broadcastMessage ReleaseResources
+    maybe (return ()) (io . exitWith) mec
+
 -- | @restart name resume@. Attempt to restart xmonad by executing the program
 -- @name@.  If @resume@ is 'True', restart with the current window state.
 -- When executing another window manager, @resume@ should be 'False'.
hunk ./XMonad/Operations.hs 423
 restart :: String -> Bool -> X ()
 restart prog resume = do
-    broadcastMessage ReleaseResources
+    exit Nothing
     io . flush =<< asks display
     let wsData = show . W.mapLayout show . windowset
         maybeShow (t, Right (PersistentExtension ext)) = Just (t, show ext)
hunk ./man/xmonad.hs 122
     -- , ((modm              , xK_b     ), sendMessage ToggleStruts)
 
     -- Quit xmonad
-    , ((modm .|. shiftMask, xK_q     ), io (exitWith ExitSuccess))
+    , ((modm .|. shiftMask, xK_q     ), exit)
 
     -- Restart xmonad
     , ((modm              , xK_q     ), spawn "xmonad --recompile; xmonad --restart")
}
[Export the native X11 Event as well as its parsed form to event handlers
Nathaniel Wesley Filardo <nwf@cs.jhu.edu>**20111115225245
 Ignore-this: 93b569e9c449d96ae117de79f598a847
] {
hunk ./XMonad/Config.hs 45
 import qualified Data.Map as M
 import System.Exit(ExitCode(ExitSuccess))
 import Graphics.X11.Xlib
-import Graphics.X11.Xlib.Extras
 
 -- | The default number of workspaces (virtual screens) and their names.
 -- By default we use numeric strings, but any string may be used as a
hunk ./XMonad/Config.hs 115
 -- | Defines a custom handler function for X Events. The function should
 -- return (All True) if the default handler is to be run afterwards.
 -- To combine event hooks, use mappend or mconcat from Data.Monoid.
-handleEventHook :: Event -> X All
-handleEventHook _ = return (All True)
+handleEventHook :: EventHook
+handleEventHook _ _ = return (All True)
 
 -- | Perform an arbitrary action at xmonad startup.
 startupHook :: X ()
hunk ./XMonad/Core.hs 29
     runX, catchX, userCode, userCodeDef, io, catchIO, installSignalHandlers, uninstallSignalHandlers,
     withDisplay, withWindowSet, isRoot, runOnWorkspaces,
     getAtom, spawn, spawnPID, xfork, getXMonadDir, recompile, trace, whenJust, whenX,
-    atom_WM_STATE, atom_WM_PROTOCOLS, atom_WM_DELETE_WINDOW, ManageHook, Query(..), runQuery
+    atom_WM_STATE, atom_WM_PROTOCOLS, atom_WM_DELETE_WINDOW, ManageHook, Query(..), runQuery,
+    EventHook
   ) where
 
 import XMonad.StackSet hiding (modify)
hunk ./XMonad/Core.hs 41
 import Control.Applicative
 import Control.Monad.State
 import Control.Monad.Reader
+import Foreign.Ptr (Ptr)
 import System.FilePath
 import System.IO
 import System.Info
hunk ./XMonad/Core.hs 100
     , terminal           :: !String              -- ^ The preferred terminal application. Default: \"xterm\"
     , layoutHook         :: !(l Window)          -- ^ The available layouts
     , manageHook         :: !ManageHook          -- ^ The action to run when a new window is opened
-    , handleEventHook    :: !(Event -> X All)    -- ^ Handle an X event, returns (All True) if the default handler
+    , handleEventHook    :: !EventHook           -- ^ Handle an X event, returns (All True) if the default handler
                                                  -- should also be run afterwards. mappend should be used for combining
                                                  -- event hooks in most cases.
     , workspaces         :: ![String]            -- ^ The list of workspaces' names
hunk ./XMonad/Core.hs 161
     mempty  = return mempty
     mappend = liftM2 mappend
 
+type EventHook = Ptr XEvent -> Event -> X All
+
 -- | Run the 'X' monad, given a chunk of 'X' monad code, and an initial state
 -- Return the result, and final state
 runX :: XConf -> XState -> X a -> IO (a, XState)
hunk ./XMonad/Main.hsc 158
             userCode $ startupHook initxmc
 
             -- main loop, for all you HOF/recursion fans out there.
-            forever $ prehandle =<< io (nextEvent dpy e >> getEvent e)
+            forever $ prehandle e =<< io (nextEvent dpy e >> getEvent e)
 
     return ()
       where
hunk ./XMonad/Main.hsc 163
         -- if the event gives us the position of the pointer, set mousePosition
-        prehandle e = let mouse = do guard (ev_event_type e `elem` evs)
-                                     return (fromIntegral (ev_x_root e)
-                                            ,fromIntegral (ev_y_root e))
-                      in local (\c -> c { mousePosition = mouse }) (handleWithHook e)
+        prehandle ep e = let mouse = do guard (ev_event_type e `elem` evs)
+                                        return (fromIntegral (ev_x_root e)
+                                               ,fromIntegral (ev_y_root e))
+                         in local (\c -> c { mousePosition = mouse }) (handleWithHook ep e)
         evs = [ keyPress, keyRelease, enterNotify, leaveNotify
               , buttonPress, buttonRelease]
 
hunk ./XMonad/Main.hsc 173
 
 -- | Runs handleEventHook from the configuration and runs the default handler
 -- function if it returned True.
-handleWithHook :: Event -> X ()
-handleWithHook e = do
+handleWithHook :: Ptr XEvent -> Event -> X ()
+handleWithHook ep e = do
   evHook <- asks (handleEventHook . config)
hunk ./XMonad/Main.hsc 176
-  whenX (userCodeDef True $ getAll `fmap` evHook e) (handle e)
+  whenX (userCodeDef True $ getAll `fmap` evHook ep e) (handle e)
 
 -- ---------------------------------------------------------------------
 -- | Event handler. Map X events onto calls into Operations.hs, which
}
[Make xmonad work when it isn't on $PATH
Nathaniel Wesley Filardo <nwf@cs.jhu.edu>**20111118193443
 Ignore-this: 4073425e42140b45f2ad0b785a2061ca
] {
hunk ./XMonad/Config.hs 40
 import XMonad.Operations
 import XMonad.ManageHook
 import qualified XMonad.StackSet as W
+import Paths_xmonad(getBinDir)
+import Control.Monad(liftM)
 import Data.Bits ((.|.))
 import Data.Monoid
 import qualified Data.Map as M
hunk ./XMonad/Config.hs 46
 import System.Exit(ExitCode(ExitSuccess))
+import System.FilePath(pathSeparator)
 import Graphics.X11.Xlib
 
 -- | The default number of workspaces (virtual screens) and their names.
hunk ./XMonad/Config.hs 211
 
     -- quit, or restart
     , ((modMask .|. shiftMask, xK_q     ), exit $ Just ExitSuccess ) -- %! Quit xmonad
-    , ((modMask              , xK_q     ), spawn "if type xmonad; then xmonad --recompile && xmonad --restart; else xmessage xmonad not in \\$PATH: \"$PATH\"; fi") -- %! Restart xmonad
+    , ((modMask              , xK_q     ), do 
+        xm <- io $ liftM (++[pathSeparator]++"xmonad") getBinDir
+        spawn $ xm ++ " --recompile && " ++ xm ++ " --restart" ) -- %! Restart xmonad
     ]
     ++
     -- mod-[1..9] %! Switch to workspace N
hunk ./XMonad/Main.hsc 33
 import Foreign.Ptr
 
 import System.Environment (getArgs)
+import System.FilePath (pathSeparator)
 
 import Graphics.X11.Xlib hiding (refreshKeyboardMapping)
 import Graphics.X11.Xlib.Extras
hunk ./XMonad/Main.hsc 43
 import XMonad.StackSet (new, floating, member)
 import qualified XMonad.StackSet as W
 import XMonad.Operations
+import Paths_xmonad (getBinDir)
 
 import System.IO
 
hunk ./XMonad/Main.hsc 309
 handle e@ClientMessageEvent { ev_message_type = mt } = do
     a <- getAtom "XMONAD_RESTART"
     if (mt == a)
-        then restart "xmonad" True
+        then do
+              xm <- io $ liftM (++[pathSeparator]++"xmonad") getBinDir
+              restart xm True
         else broadcastMessage e
 
 handle e = broadcastMessage e -- trace (eventName e) -- ignoring
hunk ./xmonad.cabal 44
                         XMonad.ManageHook
                         XMonad.Operations
                         XMonad.StackSet
+                        Paths_xmonad
 
     if flag(small_base)
         build-depends: base < 5 && >=3, containers, directory, process, filepath, extensible-exceptions
hunk ./xmonad.cabal 75
                         XMonad.ManageHook
                         XMonad.Operations
                         XMonad.StackSet
+                        Paths_xmonad
 
     if true 
         ghc-options:    -funbox-strict-fields -Wall
}
[Add a messageHook to the configuration
Nathaniel Wesley Filardo <nwf@cs.jhu.edu>**20111118193510
 Ignore-this: 5436b61db2253b9e127744c4c759335b
] {
hunk ./XMonad/Config.hs 30
 import XMonad.Core as XMonad hiding
     (workspaces,manageHook,keys,logHook,startupHook,shutdownHook,borderWidth,mouseBindings
     ,layoutHook,modMask,terminal,normalBorderColor,focusedBorderColor,focusFollowsMouse
-    ,handleEventHook)
+    ,handleEventHook,messageHook)
 import qualified XMonad.Core as XMonad
     (workspaces,manageHook,keys,logHook,startupHook,shutdownHook,borderWidth,mouseBindings
     ,layoutHook,modMask,terminal,normalBorderColor,focusedBorderColor,focusFollowsMouse
hunk ./XMonad/Config.hs 34
-    ,handleEventHook)
+    ,handleEventHook,messageHook)
 
 import XMonad.Layout
 import XMonad.Operations
hunk ./XMonad/Config.hs 47
 import qualified Data.Map as M
 import System.Exit(ExitCode(ExitSuccess))
 import System.FilePath(pathSeparator)
+import System.Posix.Process (executeFile, forkProcess)
 import Graphics.X11.Xlib
 
 -- | The default number of workspaces (virtual screens) and their names.
hunk ./XMonad/Config.hs 113
 logHook :: X ()
 logHook = return ()
 
+-- | Inform a user of a string, typically by xmessage
+messageHook :: String -> X ()
+messageHook s = io $ do
+  forkProcess $ executeFile "xmessage" True ["-default", "okay", s] Nothing
+  return ()
+
 ------------------------------------------------------------------------
 -- Event handling
 
hunk ./XMonad/Config.hs 261
     , XMonad.modMask            = defaultModMask
     , XMonad.keys               = keys
     , XMonad.logHook            = logHook
+    , XMonad.messageHook        = messageHook
     , XMonad.startupHook        = startupHook
     , XMonad.shutdownHook       = shutdownHook
     , XMonad.mouseBindings      = mouseBindings
hunk ./XMonad/Core.hs 111
                                                  -- ^ The mouse bindings
     , borderWidth        :: !Dimension           -- ^ The border width
     , logHook            :: !(X ())              -- ^ The action to perform when the windows set is changed
+    , messageHook        :: !(String -> X ())    -- ^ The action to perform to present a string to the user
     , startupHook        :: !(X ())              -- ^ The action to perform on startup
     , shutdownHook       :: !(X ())              -- ^ The action to perform on shutdown
     , focusFollowsMouse  :: !Bool                -- ^ Whether window entry events can change focus
}

Context:

[Correct recompile keybinding (issue 126)
Adam Vogt <vogt.adam@gmail.com>**20111117042522
 Ignore-this: e27d6d60a16788192c0bb0399a597fb3
 
 Thanks reenberg for pointing out the previous patch incorrectly warns about a
 missing xmonad when the config has an error.
 
 Also changed is "type" which as a shell builtin is more likely to exist than
 "which".
] 
[Warn with xmessage when xmonad cannot be found for recompile (issue 126)
Adam Vogt <vogt.adam@gmail.com>**20100330003310
 Ignore-this: f77e1ba4fdb2c15635be379d6e5f58e9
] 
[Assume locale is utf8 for spawn.
Adam Vogt <vogt.adam@gmail.com>**20111118182920
 Ignore-this: ea27391896e898f1288764ea40bc9661
 
 This adds the utf8-string dependency so that users no longer need to encode
 strings they (possibly indirectly) pass to spawn. This is the expected
 behavior, since each Char in String should be an actual character.
 
 For systems that do not use utf8 this does not help. Fixing this by using iconv
 or similar libraries may be done later.
] 
[change the default mod+p binding to keep up with changes to dmenu
Daniel Wagner <daniel@wagner-home.com>**20111013162509
 Ignore-this: e3859ef530c04cb6c2c9bfec5cc412e1
] 
[recognize the --replace option
Daniel Wagner <daniel@wagner-home.com>**20110809195250
 Ignore-this: 144ecf69bf57464f0de5a68837142190
] 
[Break a long line
Adam Vogt <vogt.adam@gmail.com>**20110609042424
 Ignore-this: 5f4c8907066e1ea5df3f384a34951402
] 
[output error code when xmonad.hs compile fails without any error output
Jens Petersen <juhp@community.haskell.org>**20110426062341
 Ignore-this: 6249588a9d427a49fceb99d78a95c438
 
 Currently if there is no ghc on the path say for some reason,
 xmonad.error is empty.  This patch makes
 it output the exitcode code when the compile process fails
 without any error output.  (It might be easier just to spawn
 a shell to get "ghc: command not found" output for free.)
] 
[Remove -fglasgow-exts for deriving Data/Typeable needed with ghc-6.6
Adam Vogt <vogt.adam@gmail.com>**20110608230415
 Ignore-this: 8f9e33a86a9919406792383c49ac4555
 
 This gets rid of a warning with ghc-7.0.2, and -XDeriveDataTypeable seems to
 have been added with 6.8, which should be far back enough:
 http://www.haskell.org/ghc/docs/6.8-latest/html/users_guide/deriving.html#deriving-typeable
] 
[Expose instances to haddock
Adam Vogt <vogt.adam@gmail.com>**20110608225613
 Ignore-this: e3ab1e9940061a70a3c1c99a119af29e
 
 While haddock may have choked on -XGeneralizedNewtypeDeriving before, this is
 no longer the case. Also this doesn't change the results with a recent haddock
 (2.9.2)
] 
[Haddock formatting for a type (-->)
Adam Vogt <vogt.adam@gmail.com>**20110524015135
 Ignore-this: 1d5ef3e32540bbfbf60578858895d7c
] 
[Generalize types of ManageHook functions, so they can be reused
Brandon S Allbery KF8NH <allbery.b@gmail.com>**20110224003021
 Ignore-this: 2328f5a2ca705279ba8ae1fe4decd03e
] 
[HCAR.tex: update per Janis's final version
gwern0@gmail.com**20110522183755
 Ignore-this: f42a8081a62954d342790409cf12542c
] 
[HCAR.text: mention 2 features added since last HCAR
gwern0@gmail.com**20110411164519
 Ignore-this: 8fa9ad872a5cf932c3903cd12163ba7d
 Prompted by Janis's usual request for updated HCARs
] 
[Correct misleading documentation on Stack (thanks sdrodge)
Adam Vogt <vogt.adam@gmail.com>**20110328001930
 Ignore-this: 518574016a9c15a741acdb6d2fa2e870
 
 `Possibly empty' applies only to `Maybe (Stack a)', not `Stack a' described
 there, so this is easier to understand.
] 
[HCAR.tex: apply Janis Voigtlaender's HCAR changes
gwern0@gmail.com**20101109205022
 Ignore-this: 788da7a151c6094e11709bb1a95299c
] 
[Bump version to 0.10
Adam Vogt <vogt.adam@gmail.com>**20110115180715
 Ignore-this: 70cb07b7d9913a6590c16a366842903
 
 This doesn't mean it's ready for this number release, but at least
 contrib/core incompatibilities introduced since 0.9 will be avoided.
] 
[Update util/GenerateManpage for pandoc 1.6
Adam Vogt <vogt.adam@gmail.com>**20101231163118
 Ignore-this: 6fdd88c649d37670501aa47594586ee6
] 
[Update util/GenerateManpage to be pandoc-1.4 compatible
Adam Vogt <vogt.adam@gmail.com>**20100403181354
 Ignore-this: 3f5efd5786ef0182a6f86494d1d933c9
] 
[HCAR.tex: update from May
gwern0@gmail.com**20101012010915
 Ignore-this: 5f08180e92a2bd8e4cec66c89265ca85
 - there were no significant changes to xmonad-core
 - description of 2 new modules not mentioned in HCAR
] 
[Update comments describing `recompile'
Adam Vogt <vogt.adam@gmail.com>**20100403181115
 Ignore-this: 8375f7011256783c763c78e127f89a4a
] 
[Note things to update each release.
Adam Vogt <vogt.adam@gmail.com>**20100322150622
 Ignore-this: e68604d52a117365347e2ec8ee99c1f2
] 
[XMonad.Core: escape slashes, ln module
gwern0@gmail.com**20100620175741
 Ignore-this: 436bd4d12e73c0fbb46a946d6dfb5306
] 
[fix haddock comment being assigned to constructor instead of field
Tomas Janousek <tomi@nomi.cz>**20100415173936
 Ignore-this: 55ac1c5dadc88a0d7635d8952feb40a0
] 
[HCAr.tex: update with additions and versions
gwern0@gmail.com**20100502201321
 Ignore-this: 5724b4d52ce0e748ef36c4a6f343dcfd
] 
[+original HCAR entry
gwern0@gmail.com**20100502200252
 Ignore-this: 9b13691977a4e96d14ebf79c8d98cfd6
] 
[Less refreshing in mouse-2 binding (thanks aavogt)
Spencer Janssen <spencerjanssen@gmail.com>**20100503155017
 Ignore-this: 5d61d6fd9a7663d0a7a1c8e2526230f7
] 
[Replaced custom forever_ by library function
Daniel Schoepe <asgaroth_@gmx.de>**20090114215556] 
[reveal: don't insert non-clients into the set of mapped windows
Tomas Janousek <tomi@nomi.cz>**20100327214243
 Ignore-this: 68c0a43d761e626cb9544ca386f4846d
 
 In xmonad-core, this fixes a small bug that caused doIgnored windows to get
 into `mapped' and never being removed from there.
 
 In the context of xmonad-contrib, this fixes a tremendous memory leak that
 could be triggered by using MouseResizableTile and UrgencyHook at the same
 time. MRT would create dummy windows that would get added to `mapped' by the
 reveal call in `windows'. As these were not removed (removal from `mapped' is
 filtered by `isClient'), they'd stay there forever and due to an inefficiency
 in UrgencyHook would eat up all memory sooner or later.
] 
[loc.hs: hlintify
gwern0@gmail.com**20100213231537
 Ignore-this: c447928ce68d0a968b55af3539c979fa
] 
[Various clean-ups suggested by HLint
Spencer Janssen <spencerjanssen@gmail.com>**20100214025750
 Ignore-this: ccaa6e774f2f8169e6083eddcffe31b6
] 
[Make the --replace docs consistent
Spencer Janssen <spencerjanssen@gmail.com>**20100213002647
 Ignore-this: c99526bce66ae1154fbf5713622f035d
] 
[Add --replace flag with documentation (issue 99).
Adam Vogt <vogt.adam@gmail.com>**20091220183529
 Ignore-this: c56000295b75c66309913e29e1671d88
] 
[Fix compile error when using base-3 (thanks bogner).
Adam Vogt <vogt.adam@gmail.com>**20100211063938
 Ignore-this: 60ba65613bc746e7e88f11a7e30b050f
] 
[Broadcast PropertyChange events (needed for layouts with decoration)
Daniel Schoepe <daniel.schoepe@gmail.com>**20100113204017
 Ignore-this: c8315f438fed66b12282c9bfe70a4d0b
] 
[Rename numlockMask to numberlockMask to help users of the template config.
Adam Vogt <vogt.adam@gmail.com>**20100118162256
 Ignore-this: 4050ed2d1ad373386c2e2b44145f07d9
 
 Without the change, the errors are like:
 
 >     [ unrelated error messages ]
 >     No constructor has all these fields: `numlockMask',
 >       `terminal', [every other field set]
 
 With the change:
 
 >     `numlockMask' is not a record selector
 >     [ context where numlockMask is named ]
] 
[Correct warnings with ghc-6.12
Adam Vogt <vogt.adam@gmail.com>**20100118181532
 Ignore-this: a48ed095b72aedec9eeb88781ace66dc
 
 Changes include:
   - compatibility with base-4 or 3 (base-2 untested) by using
     extensible-exceptions. This adds an additional dependency for users of
     ghc<6.10)
   - list all dependencies again when -ftesting (change in Cabal-1.8.0.2)
   - remove unnecessary imports
   - suppress -fwarn-unused-do-bind, with appropriate Cabal-1.8 workaround,
     described here:
     http://www.haskell.org/pipermail/xmonad/2010-January/009554.html
] 
[Add xfork: a forkProcess that works around process global state
Spencer Janssen <spencerjanssen@gmail.com>**20091223061623
 Ignore-this: 3f968260d8c1b6710c82566520c47c43
] 
[TAG 0.9.1
Spencer Janssen <spencerjanssen@gmail.com>**20091216233643
 Ignore-this: 856abdca8283155bbb8bdf003797ba34
] 
[extra-source-files for the new manpage
Spencer Janssen <spencerjanssen@gmail.com>**20091216232005
 Ignore-this: 919d964238198dd56d96a5052c2419c7
] 
[Bump to 0.9.1
Spencer Janssen <spencerjanssen@gmail.com>**20091216231110
 Ignore-this: 8a03850d758e1e4030d930cd8bf08ba9
] 
[Determine numlockMask automatically, fixes #120
Spencer Janssen <spencerjanssen@gmail.com>**20091216012140
 Ignore-this: d80c82dd0a23dc7a77fdc32fd2792130
] 
[Update for X11 1.5.0.0
Spencer Janssen <spencerjanssen@gmail.com>**20091216011700
 Ignore-this: 669c764c4c0ca516c8bdc1dfa35cd66
] 
[Safer X11 version dependency
Spencer Janssen <spencerjanssen@gmail.com>**20091216010330
 Ignore-this: 8297f7a6a65c5c97f83f860f642fc25
] 
[man/xmonad.hs: remove reference to deprecated 'dynamicLogDzen' function
Brent Yorgey <byorgey@cis.upenn.edu>**20091126053908
 Ignore-this: 7aeeac9791ffd3e6ac22bf158ea86536
] 
[A few tweaks to --verbose-version
Spencer Janssen <spencerjanssen@gmail.com>**20091208040729
 Ignore-this: cf3d6a904d23891829c10f4966974673
] 
[Generalize the type of (<+>). It can be used for keybindings too.
Adam Vogt <vogt.adam@gmail.com>**20091205233611
 Ignore-this: af15248be5e483d1a6e924f786fcc1c4
] 
[Main.hs +--verbose-version flag
gwern0@gmail.com**20091128144840
 Ignore-this: 61a081f33adb460ea459950a750dd93f
 This resolves http://code.google.com/p/xmonad/issues/detail?id=320 by adding a
 --verbose-version option yielding output like "xmonad 0.9 compiled by ghc 6.10 for linux/i386"
] 
[Swap the order that windows are mapped/unmapped.  Addresses #322
Spencer Janssen <spencerjanssen@gmail.com>**20091119025440
 Ignore-this: 22087204f1b84dae98a3cf2b7f116d3f
] 
[Add GPL warning to GenerateManpage
Spencer Janssen <spencerjanssen@gmail.com>**20091111000106
 Ignore-this: ea24691b8198976a4088a2708e0b4c94
] 
[Add a basic header to the html manpage output
Adam Vogt <vogt.adam@gmail.com>**20091028033042
 Ignore-this: 2641e0fb3179616075fa7549b57740f3
] 
[Use pandoc to convert a markdown manpage tranlation to html and man.
Adam Vogt <vogt.adam@gmail.com>**20091028030639
 Ignore-this: cdf7cdc8e44b21de8fc7725bde299792
] 
[Support for extensible state in contrib modules.
Daniel Schoepe <daniel.schoepe@gmail.com>**20091106115050
 Ignore-this: d04ee1989313ed5710c94f9d7fda3f2a
] 
[Set SIGPIPE to default in forked processes
Spencer Janssen <spencerjanssen@gmail.com>**20091106223743
 Ignore-this: f73943e4fe6c5f08967ddb82afad3eaa
] 
[TAG 0.9
Spencer Janssen <spencerjanssen@gmail.com>**20091026004641
 Ignore-this: 80347d432f3b606c8d722536d0d729aa
] 
Patch bundle hash:
f68c41333d8d0e658014f967e4ddb9ece88e4210
