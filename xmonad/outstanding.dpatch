5 patches for repository http://code.haskell.org/xmonad:

Wed Nov  3 19:31:28 EDT 2010  Nathaniel Wesley Filardo <nwf@cs.jhu.edu>
  * Add shutdownHook configuration callback

Wed Nov  3 15:45:59 EDT 2010  Nathaniel Wesley Filardo <nwf@cs.jhu.edu>
  * sigCHLD gets Catch-ed, not Ignored.
  
  This allows getProcessStatus True _ _ to work elsewhere while still reaping
  zombies.
  

Wed Nov  3 19:37:06 EDT 2010  Nathaniel Wesley Filardo <nwf@cs.jhu.edu>
  * Make xmonad work when it isn't on $PATH

Wed Nov  3 19:39:31 EDT 2010  Nathaniel Wesley Filardo <nwf@cs.jhu.edu>
  * Add a messageHook to the configuration

Sat Nov 20 20:29:54 EST 2010  Nathaniel Wesley Filardo <nwf@cs.jhu.edu>
  * Make xmonad use threaded runtime

New patches:

[Add shutdownHook configuration callback
Nathaniel Wesley Filardo <nwf@cs.jhu.edu>**20101103233128
 Ignore-this: 93966ddca3f66f719b41e4504f2ba451
] {
hunk ./XMonad/Config.hs 28
 -- Useful imports
 --
 import XMonad.Core as XMonad hiding
-    (workspaces,manageHook,keys,logHook,startupHook,borderWidth,mouseBindings
+    (workspaces,manageHook,keys,logHook,startupHook,shutdownHook,borderWidth,mouseBindings
     ,layoutHook,modMask,terminal,normalBorderColor,focusedBorderColor,focusFollowsMouse
     ,handleEventHook)
 import qualified XMonad.Core as XMonad
hunk ./XMonad/Config.hs 32
-    (workspaces,manageHook,keys,logHook,startupHook,borderWidth,mouseBindings
+    (workspaces,manageHook,keys,logHook,startupHook,shutdownHook,borderWidth,mouseBindings
     ,layoutHook,modMask,terminal,normalBorderColor,focusedBorderColor,focusFollowsMouse
     ,handleEventHook)
 
hunk ./XMonad/Config.hs 43
 import Data.Bits ((.|.))
 import Data.Monoid
 import qualified Data.Map as M
-import System.Exit
+import System.Exit(ExitCode(ExitSuccess))
 import Graphics.X11.Xlib
 import Graphics.X11.Xlib.Extras
 
hunk ./XMonad/Config.hs 123
 startupHook :: X ()
 startupHook = return ()
 
+-- | Perform an arbitrary action at xmonad shutdown.
+shutdownHook :: X ()
+shutdownHook = return ()
+
 ------------------------------------------------------------------------
 -- Extensible layouts
 --
hunk ./XMonad/Config.hs 208
     --, ((modMask              , xK_b     ), modifyGap (\i n -> let x = (XMonad.defaultGaps conf ++ repeat (0,0,0,0)) !! i in if n == x then (0,0,0,0) else x)) -- %! Toggle the status bar gap
 
     -- quit, or restart
-    , ((modMask .|. shiftMask, xK_q     ), io (exitWith ExitSuccess)) -- %! Quit xmonad
+    , ((modMask .|. shiftMask, xK_q     ), exit $ Just ExitSuccess ) -- %! Quit xmonad
     , ((modMask              , xK_q     ), spawn "xmonad --recompile && xmonad --restart") -- %! Restart xmonad
     ]
     ++
hunk ./XMonad/Config.hs 251
     , XMonad.keys               = keys
     , XMonad.logHook            = logHook
     , XMonad.startupHook        = startupHook
+    , XMonad.shutdownHook       = shutdownHook
     , XMonad.mouseBindings      = mouseBindings
     , XMonad.manageHook         = manageHook
     , XMonad.handleEventHook    = handleEventHook
hunk ./XMonad/Core.hs 111
     , borderWidth        :: !Dimension           -- ^ The border width
     , logHook            :: !(X ())              -- ^ The action to perform when the windows set is changed
     , startupHook        :: !(X ())              -- ^ The action to perform on startup
+    , shutdownHook       :: !(X ())              -- ^ The action to perform on shutdown
     , focusFollowsMouse  :: !Bool                -- ^ Whether window entry events can change focus
     }
 
hunk ./XMonad/Operations.hs 38
 import Control.Monad.State
 import qualified Control.Exception.Extensible as C
 
+import System.Exit(ExitCode, exitWith)
 import System.Posix.Process (executeFile)
 import Graphics.X11.Xlib
 import Graphics.X11.Xinerama (getScreenInfo)
hunk ./XMonad/Operations.hs 408
 
 ------------------------------------------------------------------------
 
+-- | Properly shut down XMonad.  Please use this instead of io (exitWith _).
+--
+-- If given an exit status, it will actually exit xmonad; otherwise, it
+-- simply invokes the resource management calls.
+exit :: Maybe ExitCode -> X ()
+exit mec = do
+    shh <- asks (shutdownHook . config)
+    _ <- userCode $ shh
+    broadcastMessage ReleaseResources
+    maybe (return ()) (io . exitWith) mec
+
 -- | @restart name resume@. Attempt to restart xmonad by executing the program
 -- @name@.  If @resume@ is 'True', restart with the current window state.
 -- When executing another window manager, @resume@ should be 'False'.
hunk ./XMonad/Operations.hs 424
 restart :: String -> Bool -> X ()
 restart prog resume = do
-    broadcastMessage ReleaseResources
+    exit Nothing
     io . flush =<< asks display
     let wsData = show . W.mapLayout show . windowset
         maybeShow (t, Right (PersistentExtension ext)) = Just (t, show ext)
hunk ./man/xmonad.hs 122
     -- , ((modm              , xK_b     ), sendMessage ToggleStruts)
 
     -- Quit xmonad
-    , ((modm .|. shiftMask, xK_q     ), io (exitWith ExitSuccess))
+    , ((modm .|. shiftMask, xK_q     ), exit)
 
     -- Restart xmonad
     , ((modm              , xK_q     ), spawn "xmonad --recompile; xmonad --restart")
}
[sigCHLD gets Catch-ed, not Ignored.
Nathaniel Wesley Filardo <nwf@cs.jhu.edu>**20101103194559
 Ignore-this: 56903583a1e8b5b9dfef2c6faef6b498
 
 This allows getProcessStatus True _ _ to work elsewhere while still reaping
 zombies.
 
] {
hunk ./XMonad/Core.hs 458
     binT <- getModTime bin
     if force || any (binT <) (srcT : libTs)
       then do
-        -- temporarily disable SIGCHLD ignoring:
-        uninstallSignalHandlers
         status <- bracket (openFile err WriteMode) hClose $ \h ->
             waitForProcess =<< runProcess "ghc" ["--make", "xmonad.hs", "-i", "-ilib", "-fforce-recomp", "-v0", "-o",binn] (Just dir)
                                     Nothing Nothing Nothing (Just h)
hunk ./XMonad/Core.hs 462
 
-        -- re-enable SIGCHLD:
-        installSignalHandlers
-
         -- now, if it fails, run xmessage to let the user know:
         when (status /= ExitSuccess) $ do
             ghcErr <- readFile err
hunk ./XMonad/Core.hs 501
 installSignalHandlers :: MonadIO m => m ()
 installSignalHandlers = io $ do
     installHandler openEndedPipe Ignore Nothing
-    installHandler sigCHLD Ignore Nothing
-    (try :: IO a -> IO (Either SomeException a))
-      $ fix $ \more -> do
+    installHandler sigCHLD (Catch childhandler) Nothing
+    childhandler
+    return ()
+ where
+  childhandler = do
+     (try :: IO a -> IO (Either SomeException a)) $
+       fix $ \more -> do
         x <- getAnyProcessStatus False False
         when (isJust x) more
hunk ./XMonad/Core.hs 510
-    return ()
+     return ()
 
 uninstallSignalHandlers :: MonadIO m => m ()
 uninstallSignalHandlers = io $ do
}
[Make xmonad work when it isn't on $PATH
Nathaniel Wesley Filardo <nwf@cs.jhu.edu>**20101103233706
 Ignore-this: 67c9e7b237802f36bd99cc88b902e4a8
] {
hunk ./XMonad/Config.hs 40
 import XMonad.Operations
 import XMonad.ManageHook
 import qualified XMonad.StackSet as W
+import Paths_xmonad(getBinDir)
+import Control.Monad(liftM)
 import Data.Bits ((.|.))
 import Data.Monoid
 import qualified Data.Map as M
hunk ./XMonad/Config.hs 46
 import System.Exit(ExitCode(ExitSuccess))
+import System.FilePath(pathSeparator)
 import Graphics.X11.Xlib
 import Graphics.X11.Xlib.Extras
 
hunk ./XMonad/Config.hs 212
 
     -- quit, or restart
     , ((modMask .|. shiftMask, xK_q     ), exit $ Just ExitSuccess ) -- %! Quit xmonad
-    , ((modMask              , xK_q     ), spawn "xmonad --recompile && xmonad --restart") -- %! Restart xmonad
+    , ((modMask              , xK_q     ), do 
+        xm <- io $ liftM (++[pathSeparator]++"xmonad") getBinDir
+        spawn $ xm ++ " --recompile && " ++ xm ++ " --restart" ) -- %! Restart xmonad
     ]
     ++
     -- mod-[1..9] %! Switch to workspace N
hunk ./XMonad/Main.hsc 33
 import Foreign.Ptr
 
 import System.Environment (getArgs)
+import System.FilePath (pathSeparator)
 
 import Graphics.X11.Xlib hiding (refreshKeyboardMapping)
 import Graphics.X11.Xlib.Extras
hunk ./XMonad/Main.hsc 43
 import XMonad.StackSet (new, floating, member)
 import qualified XMonad.StackSet as W
 import XMonad.Operations
+import Paths_xmonad (getBinDir)
 
 import System.IO
 
hunk ./XMonad/Main.hsc 309
 handle e@ClientMessageEvent { ev_message_type = mt } = do
     a <- getAtom "XMONAD_RESTART"
     if (mt == a)
-        then restart "xmonad" True
+        then do
+              xm <- io $ liftM (++[pathSeparator]++"xmonad") getBinDir
+              restart xm True
         else broadcastMessage e
 
 handle e = broadcastMessage e -- trace (eventName e) -- ignoring
hunk ./xmonad.cabal 44
                         XMonad.ManageHook
                         XMonad.Operations
                         XMonad.StackSet
+                        Paths_xmonad
 
     if flag(small_base)
         build-depends: base < 5 && >=3, containers, directory, process, filepath, extensible-exceptions
hunk ./xmonad.cabal 74
                         XMonad.ManageHook
                         XMonad.Operations
                         XMonad.StackSet
+                        Paths_xmonad
 
     if true 
         ghc-options:    -funbox-strict-fields -Wall
}
[Add a messageHook to the configuration
Nathaniel Wesley Filardo <nwf@cs.jhu.edu>**20101103233931
 Ignore-this: 51a6f96ba956b38c434aef47f7534133
] {
hunk ./XMonad/Config.hs 30
 import XMonad.Core as XMonad hiding
     (workspaces,manageHook,keys,logHook,startupHook,shutdownHook,borderWidth,mouseBindings
     ,layoutHook,modMask,terminal,normalBorderColor,focusedBorderColor,focusFollowsMouse
-    ,handleEventHook)
+    ,handleEventHook,messageHook)
 import qualified XMonad.Core as XMonad
     (workspaces,manageHook,keys,logHook,startupHook,shutdownHook,borderWidth,mouseBindings
     ,layoutHook,modMask,terminal,normalBorderColor,focusedBorderColor,focusFollowsMouse
hunk ./XMonad/Config.hs 34
-    ,handleEventHook)
+    ,handleEventHook,messageHook)
 
 import XMonad.Layout
 import XMonad.Operations
hunk ./XMonad/Config.hs 47
 import qualified Data.Map as M
 import System.Exit(ExitCode(ExitSuccess))
 import System.FilePath(pathSeparator)
+import System.Posix.Process (executeFile, forkProcess)
 import Graphics.X11.Xlib
 import Graphics.X11.Xlib.Extras
 
hunk ./XMonad/Config.hs 114
 logHook :: X ()
 logHook = return ()
 
+-- | Inform a user of a string, typically by xmessage
+messageHook :: String -> X ()
+messageHook s = io $ do
+  forkProcess $ executeFile "xmessage" True ["-default", "okay", s] Nothing
+  return ()
+
 ------------------------------------------------------------------------
 -- Event handling
 
hunk ./XMonad/Config.hs 262
     , XMonad.modMask            = defaultModMask
     , XMonad.keys               = keys
     , XMonad.logHook            = logHook
+    , XMonad.messageHook        = messageHook
     , XMonad.startupHook        = startupHook
     , XMonad.shutdownHook       = shutdownHook
     , XMonad.mouseBindings      = mouseBindings
hunk ./XMonad/Core.hs 110
                                                  -- ^ The mouse bindings
     , borderWidth        :: !Dimension           -- ^ The border width
     , logHook            :: !(X ())              -- ^ The action to perform when the windows set is changed
+    , messageHook        :: !(String -> X ())    -- ^ The action to perform to present a string to the user
     , startupHook        :: !(X ())              -- ^ The action to perform on startup
     , shutdownHook       :: !(X ())              -- ^ The action to perform on shutdown
     , focusFollowsMouse  :: !Bool                -- ^ Whether window entry events can change focus
}
[Make xmonad use threaded runtime
Nathaniel Wesley Filardo <nwf@cs.jhu.edu>**20101121012954
 Ignore-this: 18abbd47312a071f838b5b45bdb50aa1
] hunk ./XMonad/Core.hs 460
     if force || any (binT <) (srcT : libTs)
       then do
         status <- bracket (openFile err WriteMode) hClose $ \h ->
-            waitForProcess =<< runProcess "ghc" ["--make", "xmonad.hs", "-i", "-ilib", "-fforce-recomp", "-v0", "-o",binn] (Just dir)
+            waitForProcess =<< runProcess "ghc" ["--make", "xmonad.hs", "-i", "-ilib", "-fforce-recomp", "-v0", "-threaded", "-o",binn] (Just dir)
                                     Nothing Nothing Nothing (Just h)
 
         -- now, if it fails, run xmessage to let the user know:

Context:

[XMonad.Core: escape slashes, ln module
gwern0@gmail.com**20100620175741
 Ignore-this: 436bd4d12e73c0fbb46a946d6dfb5306
] 
[fix haddock comment being assigned to constructor instead of field
Tomas Janousek <tomi@nomi.cz>**20100415173936
 Ignore-this: 55ac1c5dadc88a0d7635d8952feb40a0
] 
[HCAr.tex: update with additions and versions
gwern0@gmail.com**20100502201321
 Ignore-this: 5724b4d52ce0e748ef36c4a6f343dcfd
] 
[+original HCAR entry
gwern0@gmail.com**20100502200252
 Ignore-this: 9b13691977a4e96d14ebf79c8d98cfd6
] 
[Less refreshing in mouse-2 binding (thanks aavogt)
Spencer Janssen <spencerjanssen@gmail.com>**20100503155017
 Ignore-this: 5d61d6fd9a7663d0a7a1c8e2526230f7
] 
[Replaced custom forever_ by library function
Daniel Schoepe <asgaroth_@gmx.de>**20090114215556] 
[reveal: don't insert non-clients into the set of mapped windows
Tomas Janousek <tomi@nomi.cz>**20100327214243
 Ignore-this: 68c0a43d761e626cb9544ca386f4846d
 
 In xmonad-core, this fixes a small bug that caused doIgnored windows to get
 into `mapped' and never being removed from there.
 
 In the context of xmonad-contrib, this fixes a tremendous memory leak that
 could be triggered by using MouseResizableTile and UrgencyHook at the same
 time. MRT would create dummy windows that would get added to `mapped' by the
 reveal call in `windows'. As these were not removed (removal from `mapped' is
 filtered by `isClient'), they'd stay there forever and due to an inefficiency
 in UrgencyHook would eat up all memory sooner or later.
] 
[loc.hs: hlintify
gwern0@gmail.com**20100213231537
 Ignore-this: c447928ce68d0a968b55af3539c979fa
] 
[Various clean-ups suggested by HLint
Spencer Janssen <spencerjanssen@gmail.com>**20100214025750
 Ignore-this: ccaa6e774f2f8169e6083eddcffe31b6
] 
[Make the --replace docs consistent
Spencer Janssen <spencerjanssen@gmail.com>**20100213002647
 Ignore-this: c99526bce66ae1154fbf5713622f035d
] 
[Add --replace flag with documentation (issue 99).
Adam Vogt <vogt.adam@gmail.com>**20091220183529
 Ignore-this: c56000295b75c66309913e29e1671d88
] 
[Fix compile error when using base-3 (thanks bogner).
Adam Vogt <vogt.adam@gmail.com>**20100211063938
 Ignore-this: 60ba65613bc746e7e88f11a7e30b050f
] 
[Broadcast PropertyChange events (needed for layouts with decoration)
Daniel Schoepe <daniel.schoepe@gmail.com>**20100113204017
 Ignore-this: c8315f438fed66b12282c9bfe70a4d0b
] 
[Rename numlockMask to numberlockMask to help users of the template config.
Adam Vogt <vogt.adam@gmail.com>**20100118162256
 Ignore-this: 4050ed2d1ad373386c2e2b44145f07d9
 
 Without the change, the errors are like:
 
 >     [ unrelated error messages ]
 >     No constructor has all these fields: `numlockMask',
 >       `terminal', [every other field set]
 
 With the change:
 
 >     `numlockMask' is not a record selector
 >     [ context where numlockMask is named ]
] 
[Correct warnings with ghc-6.12
Adam Vogt <vogt.adam@gmail.com>**20100118181532
 Ignore-this: a48ed095b72aedec9eeb88781ace66dc
 
 Changes include:
   - compatibility with base-4 or 3 (base-2 untested) by using
     extensible-exceptions. This adds an additional dependency for users of
     ghc<6.10)
   - list all dependencies again when -ftesting (change in Cabal-1.8.0.2)
   - remove unnecessary imports
   - suppress -fwarn-unused-do-bind, with appropriate Cabal-1.8 workaround,
     described here:
     http://www.haskell.org/pipermail/xmonad/2010-January/009554.html
] 
[Add xfork: a forkProcess that works around process global state
Spencer Janssen <spencerjanssen@gmail.com>**20091223061623
 Ignore-this: 3f968260d8c1b6710c82566520c47c43
] 
[TAG 0.9.1
Spencer Janssen <spencerjanssen@gmail.com>**20091216233643
 Ignore-this: 856abdca8283155bbb8bdf003797ba34
] 
[extra-source-files for the new manpage
Spencer Janssen <spencerjanssen@gmail.com>**20091216232005
 Ignore-this: 919d964238198dd56d96a5052c2419c7
] 
[Bump to 0.9.1
Spencer Janssen <spencerjanssen@gmail.com>**20091216231110
 Ignore-this: 8a03850d758e1e4030d930cd8bf08ba9
] 
[Determine numlockMask automatically, fixes #120
Spencer Janssen <spencerjanssen@gmail.com>**20091216012140
 Ignore-this: d80c82dd0a23dc7a77fdc32fd2792130
] 
[Update for X11 1.5.0.0
Spencer Janssen <spencerjanssen@gmail.com>**20091216011700
 Ignore-this: 669c764c4c0ca516c8bdc1dfa35cd66
] 
[Safer X11 version dependency
Spencer Janssen <spencerjanssen@gmail.com>**20091216010330
 Ignore-this: 8297f7a6a65c5c97f83f860f642fc25
] 
[man/xmonad.hs: remove reference to deprecated 'dynamicLogDzen' function
Brent Yorgey <byorgey@cis.upenn.edu>**20091126053908
 Ignore-this: 7aeeac9791ffd3e6ac22bf158ea86536
] 
[A few tweaks to --verbose-version
Spencer Janssen <spencerjanssen@gmail.com>**20091208040729
 Ignore-this: cf3d6a904d23891829c10f4966974673
] 
[Generalize the type of (<+>). It can be used for keybindings too.
Adam Vogt <vogt.adam@gmail.com>**20091205233611
 Ignore-this: af15248be5e483d1a6e924f786fcc1c4
] 
[Main.hs +--verbose-version flag
gwern0@gmail.com**20091128144840
 Ignore-this: 61a081f33adb460ea459950a750dd93f
 This resolves http://code.google.com/p/xmonad/issues/detail?id=320 by adding a
 --verbose-version option yielding output like "xmonad 0.9 compiled by ghc 6.10 for linux/i386"
] 
[Swap the order that windows are mapped/unmapped.  Addresses #322
Spencer Janssen <spencerjanssen@gmail.com>**20091119025440
 Ignore-this: 22087204f1b84dae98a3cf2b7f116d3f
] 
[Add GPL warning to GenerateManpage
Spencer Janssen <spencerjanssen@gmail.com>**20091111000106
 Ignore-this: ea24691b8198976a4088a2708e0b4c94
] 
[Add a basic header to the html manpage output
Adam Vogt <vogt.adam@gmail.com>**20091028033042
 Ignore-this: 2641e0fb3179616075fa7549b57740f3
] 
[Use pandoc to convert a markdown manpage tranlation to html and man.
Adam Vogt <vogt.adam@gmail.com>**20091028030639
 Ignore-this: cdf7cdc8e44b21de8fc7725bde299792
] 
[Support for extensible state in contrib modules.
Daniel Schoepe <daniel.schoepe@gmail.com>**20091106115050
 Ignore-this: d04ee1989313ed5710c94f9d7fda3f2a
] 
[Set SIGPIPE to default in forked processes
Spencer Janssen <spencerjanssen@gmail.com>**20091106223743
 Ignore-this: f73943e4fe6c5f08967ddb82afad3eaa
] 
[TAG 0.9
Spencer Janssen <spencerjanssen@gmail.com>**20091026004641
 Ignore-this: 80347d432f3b606c8d722536d0d729aa
] 
Patch bundle hash:
48e827b65a135ea05d0a19d5630700b807b1a308
